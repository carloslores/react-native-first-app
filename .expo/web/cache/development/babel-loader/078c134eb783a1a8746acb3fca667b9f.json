{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/ReactNative/renderApplication.js\";\n\nvar AppContainer = require(\"./AppContainer\");\n\nimport GlobalPerformanceLogger from \"../Utilities/GlobalPerformanceLogger\";\nimport PerformanceLoggerContext from \"../Utilities/PerformanceLoggerContext\";\n\nvar React = require('react');\n\nvar invariant = require('invariant');\n\nrequire(\"../Utilities/BackHandler\");\n\nfunction renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showArchitectureIndicator, scopedPerformanceLogger, isLogBox) {\n  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);\n  var renderable = React.createElement(PerformanceLoggerContext.Provider, {\n    value: scopedPerformanceLogger != null ? scopedPerformanceLogger : GlobalPerformanceLogger,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, React.createElement(AppContainer, {\n    rootTag: rootTag,\n    fabric: fabric,\n    showArchitectureIndicator: showArchitectureIndicator,\n    WrapperComponent: WrapperComponent,\n    internal_excludeLogBox: isLogBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(RootComponent, _extends({}, initialProps, {\n    rootTag: rootTag,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }))));\n  GlobalPerformanceLogger.startTimespan('renderApplication_React_render');\n\n  if (fabric) {\n    require(\"../Renderer/shims/ReactFabric\").render(renderable, rootTag);\n  } else {\n    require(\"../Renderer/shims/ReactNative\").render(renderable, rootTag);\n  }\n\n  GlobalPerformanceLogger.stopTimespan('renderApplication_React_render');\n}\n\nmodule.exports = renderApplication;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/ReactNative/renderApplication.js"],"names":["AppContainer","require","GlobalPerformanceLogger","PerformanceLoggerContext","React","invariant","renderApplication","RootComponent","initialProps","rootTag","WrapperComponent","fabric","showArchitectureIndicator","scopedPerformanceLogger","isLogBox","renderable","startTimespan","render","stopTimespan","module","exports"],"mappings":"AAUA;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,kBAA5B;;AACA,OAAOC,uBAAP;AAEA,OAAOC,wBAAP;;AACA,IAAMC,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAzB;;AAGAA,OAAO,4BAAP;;AAEA,SAASK,iBAAT,CACEC,aADF,EAEEC,YAFF,EAGEC,OAHF,EAIEC,gBAJF,EAKEC,MALF,EAMEC,yBANF,EAOEC,uBAPF,EAQEC,QARF,EASE;AACAT,EAAAA,SAAS,CAACI,OAAD,EAAU,8CAAV,EAA0DA,OAA1D,CAAT;AAEA,MAAMM,UAAU,GACd,oBAAC,wBAAD,CAA0B,QAA1B;AACE,IAAA,KAAK,EAAEF,uBAAF,WAAEA,uBAAF,GAA6BX,uBADpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEO,OADX;AAEE,IAAA,MAAM,EAAEE,MAFV;AAGE,IAAA,yBAAyB,EAAEC,yBAH7B;AAIE,IAAA,gBAAgB,EAAEF,gBAJpB;AAKE,IAAA,sBAAsB,EAAEI,QAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,aAAD,eAAmBN,YAAnB;AAAiC,IAAA,OAAO,EAAEC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANF,CAFF,CADF;AAcAP,EAAAA,uBAAuB,CAACc,aAAxB,CAAsC,gCAAtC;;AACA,MAAIL,MAAJ,EAAY;AACVV,IAAAA,OAAO,iCAAP,CAAyCgB,MAAzC,CAAgDF,UAAhD,EAA4DN,OAA5D;AACD,GAFD,MAEO;AACLR,IAAAA,OAAO,iCAAP,CAAyCgB,MAAzC,CAAgDF,UAAhD,EAA4DN,OAA5D;AACD;;AACDP,EAAAA,uBAAuB,CAACgB,YAAxB,CAAqC,gCAArC;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,iBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst AppContainer = require('./AppContainer');\nimport GlobalPerformanceLogger from '../Utilities/GlobalPerformanceLogger';\nimport type {IPerformanceLogger} from '../Utilities/createPerformanceLogger';\nimport PerformanceLoggerContext from '../Utilities/PerformanceLoggerContext';\nconst React = require('react');\n\nconst invariant = require('invariant');\n\n// require BackHandler so it sets the default handler that exits the app if no listeners respond\nrequire('../Utilities/BackHandler');\n\nfunction renderApplication<Props: Object>(\n  RootComponent: React.ComponentType<Props>,\n  initialProps: Props,\n  rootTag: any,\n  WrapperComponent?: ?React.ComponentType<*>,\n  fabric?: boolean,\n  showArchitectureIndicator?: boolean,\n  scopedPerformanceLogger?: IPerformanceLogger,\n  isLogBox?: boolean,\n) {\n  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);\n\n  const renderable = (\n    <PerformanceLoggerContext.Provider\n      value={scopedPerformanceLogger ?? GlobalPerformanceLogger}>\n      <AppContainer\n        rootTag={rootTag}\n        fabric={fabric}\n        showArchitectureIndicator={showArchitectureIndicator}\n        WrapperComponent={WrapperComponent}\n        internal_excludeLogBox={isLogBox}>\n        <RootComponent {...initialProps} rootTag={rootTag} />\n      </AppContainer>\n    </PerformanceLoggerContext.Provider>\n  );\n\n  GlobalPerformanceLogger.startTimespan('renderApplication_React_render');\n  if (fabric) {\n    require('../Renderer/shims/ReactFabric').render(renderable, rootTag);\n  } else {\n    require('../Renderer/shims/ReactNative').render(renderable, rootTag);\n  }\n  GlobalPerformanceLogger.stopTimespan('renderApplication_React_render');\n}\n\nmodule.exports = renderApplication;\n"]},"metadata":{},"sourceType":"module"}