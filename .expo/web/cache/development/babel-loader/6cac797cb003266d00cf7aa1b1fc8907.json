{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport RCTActionSheetManager from \"./NativeActionSheetManager\";\n\nvar invariant = require('invariant');\n\nvar processColor = require(\"../StyleSheet/processColor\");\n\nvar ActionSheetIOS = {\n  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {\n    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(RCTActionSheetManager, \"ActionSheetManager does't exist\");\n\n    var tintColor = options.tintColor,\n        destructiveButtonIndex = options.destructiveButtonIndex,\n        remainingOptions = _objectWithoutProperties(options, [\"tintColor\", \"destructiveButtonIndex\"]);\n\n    var destructiveButtonIndices = null;\n\n    if (Array.isArray(destructiveButtonIndex)) {\n      destructiveButtonIndices = destructiveButtonIndex;\n    } else if (typeof destructiveButtonIndex === 'number') {\n      destructiveButtonIndices = [destructiveButtonIndex];\n    }\n\n    var processedTintColor = processColor(tintColor);\n    invariant(processedTintColor == null || typeof processedTintColor === 'number', 'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor');\n    RCTActionSheetManager.showActionSheetWithOptions(_objectSpread(_objectSpread({}, remainingOptions), {}, {\n      tintColor: processedTintColor,\n      destructiveButtonIndices: destructiveButtonIndices\n    }), callback);\n  },\n  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {\n    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');\n    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');\n    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');\n    invariant(RCTActionSheetManager, \"ActionSheetManager does't exist\");\n    RCTActionSheetManager.showShareActionSheetWithOptions(_objectSpread(_objectSpread({}, options), {}, {\n      tintColor: processColor(options.tintColor)\n    }), failureCallback, successCallback);\n  }\n};\nmodule.exports = ActionSheetIOS;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js"],"names":["RCTActionSheetManager","invariant","require","processColor","ActionSheetIOS","showActionSheetWithOptions","options","callback","tintColor","destructiveButtonIndex","remainingOptions","destructiveButtonIndices","Array","isArray","processedTintColor","showShareActionSheetWithOptions","failureCallback","successCallback","module","exports"],"mappings":"AAUA;;;;;;;;;AAEA,OAAOA,qBAAP;;AAEA,IAAMC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,YAAY,GAAGD,OAAO,8BAA5B;;AASA,IAAME,cAAc,GAAG;AAiBrBC,EAAAA,0BAjBqB,sCAkBnBC,OAlBmB,EA4BnBC,QA5BmB,EA6BnB;AACAN,IAAAA,SAAS,CACP,OAAOK,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IADpC,EAEP,gCAFO,CAAT;AAIAL,IAAAA,SAAS,CAAC,OAAOM,QAAP,KAAoB,UAArB,EAAiC,+BAAjC,CAAT;AACAN,IAAAA,SAAS,CAACD,qBAAD,EAAwB,iCAAxB,CAAT;;AANA,QAQOQ,SARP,GAQiEF,OARjE,CAQOE,SARP;AAAA,QAQkBC,sBARlB,GAQiEH,OARjE,CAQkBG,sBARlB;AAAA,QAQ6CC,gBAR7C,4BAQiEJ,OARjE;;AASA,QAAIK,wBAAwB,GAAG,IAA/B;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcJ,sBAAd,CAAJ,EAA2C;AACzCE,MAAAA,wBAAwB,GAAGF,sBAA3B;AACD,KAFD,MAEO,IAAI,OAAOA,sBAAP,KAAkC,QAAtC,EAAgD;AACrDE,MAAAA,wBAAwB,GAAG,CAACF,sBAAD,CAA3B;AACD;;AAED,QAAMK,kBAAkB,GAAGX,YAAY,CAACK,SAAD,CAAvC;AACAP,IAAAA,SAAS,CACPa,kBAAkB,IAAI,IAAtB,IAA8B,OAAOA,kBAAP,KAA8B,QADrD,EAEP,gFAFO,CAAT;AAIAd,IAAAA,qBAAqB,CAACK,0BAAtB,iCAEOK,gBAFP;AAGIF,MAAAA,SAAS,EAAEM,kBAHf;AAIIH,MAAAA,wBAAwB,EAAxBA;AAJJ,QAMEJ,QANF;AAQD,GA3DoB;AAoFrBQ,EAAAA,+BApFqB,2CAqFnBT,OArFmB,EAsFnBU,eAtFmB,EAuFnBC,eAvFmB,EAwFnB;AACAhB,IAAAA,SAAS,CACP,OAAOK,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IADpC,EAEP,gCAFO,CAAT;AAIAL,IAAAA,SAAS,CACP,OAAOe,eAAP,KAA2B,UADpB,EAEP,sCAFO,CAAT;AAIAf,IAAAA,SAAS,CACP,OAAOgB,eAAP,KAA2B,UADpB,EAEP,sCAFO,CAAT;AAIAhB,IAAAA,SAAS,CAACD,qBAAD,EAAwB,iCAAxB,CAAT;AACAA,IAAAA,qBAAqB,CAACe,+BAAtB,iCACMT,OADN;AACeE,MAAAA,SAAS,EAAEL,YAAY,CAACG,OAAO,CAACE,SAAT;AADtC,QAEEQ,eAFF,EAGEC,eAHF;AAKD;AA3GoB,CAAvB;AA8GAC,MAAM,CAACC,OAAP,GAAiBf,cAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport RCTActionSheetManager from './NativeActionSheetManager';\n\nconst invariant = require('invariant');\nconst processColor = require('../StyleSheet/processColor');\nimport type {ColorValue} from '../StyleSheet/StyleSheetTypes';\nimport type {ProcessedColorValue} from '../StyleSheet/processColor';\n\n/**\n * Display action sheets and share sheets on iOS.\n *\n * See https://reactnative.dev/docs/actionsheetios.html\n */\nconst ActionSheetIOS = {\n  /**\n   * Display an iOS action sheet.\n   *\n   * The `options` object must contain one or more of:\n   *\n   * - `options` (array of strings) - a list of button titles (required)\n   * - `cancelButtonIndex` (int) - index of cancel button in `options`\n   * - `destructiveButtonIndex` (int or array of ints) - index or indices of destructive buttons in `options`\n   * - `title` (string) - a title to show above the action sheet\n   * - `message` (string) - a message to show below the title\n   *\n   * The 'callback' function takes one parameter, the zero-based index\n   * of the selected item.\n   *\n   * See https://reactnative.dev/docs/actionsheetios.html#showactionsheetwithoptions\n   */\n  showActionSheetWithOptions(\n    options: {|\n      +title?: ?string,\n      +message?: ?string,\n      +options: Array<string>,\n      +destructiveButtonIndex?: ?number | ?Array<number>,\n      +cancelButtonIndex?: ?number,\n      +anchor?: ?number,\n      +tintColor?: ColorValue | ProcessedColorValue,\n      +userInterfaceStyle?: string,\n    |},\n    callback: (buttonIndex: number) => void,\n  ) {\n    invariant(\n      typeof options === 'object' && options !== null,\n      'Options must be a valid object',\n    );\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(RCTActionSheetManager, \"ActionSheetManager does't exist\");\n\n    const {tintColor, destructiveButtonIndex, ...remainingOptions} = options;\n    let destructiveButtonIndices = null;\n\n    if (Array.isArray(destructiveButtonIndex)) {\n      destructiveButtonIndices = destructiveButtonIndex;\n    } else if (typeof destructiveButtonIndex === 'number') {\n      destructiveButtonIndices = [destructiveButtonIndex];\n    }\n\n    const processedTintColor = processColor(tintColor);\n    invariant(\n      processedTintColor == null || typeof processedTintColor === 'number',\n      'Unexpected color given for ActionSheetIOS.showActionSheetWithOptions tintColor',\n    );\n    RCTActionSheetManager.showActionSheetWithOptions(\n      {\n        ...remainingOptions,\n        tintColor: processedTintColor,\n        destructiveButtonIndices,\n      },\n      callback,\n    );\n  },\n\n  /**\n   * Display the iOS share sheet. The `options` object should contain\n   * one or both of `message` and `url` and can additionally have\n   * a `subject` or `excludedActivityTypes`:\n   *\n   * - `url` (string) - a URL to share\n   * - `message` (string) - a message to share\n   * - `subject` (string) - a subject for the message\n   * - `excludedActivityTypes` (array) - the activities to exclude from\n   *   the ActionSheet\n   * - `tintColor` (color) - tint color of the buttons\n   *\n   * The 'failureCallback' function takes one parameter, an error object.\n   * The only property defined on this object is an optional `stack` property\n   * of type `string`.\n   *\n   * The 'successCallback' function takes two parameters:\n   *\n   * - a boolean value signifying success or failure\n   * - a string that, in the case of success, indicates the method of sharing\n   *\n   * See https://reactnative.dev/docs/actionsheetios.html#showshareactionsheetwithoptions\n   */\n  showShareActionSheetWithOptions(\n    options: Object,\n    failureCallback: Function,\n    successCallback: Function,\n  ) {\n    invariant(\n      typeof options === 'object' && options !== null,\n      'Options must be a valid object',\n    );\n    invariant(\n      typeof failureCallback === 'function',\n      'Must provide a valid failureCallback',\n    );\n    invariant(\n      typeof successCallback === 'function',\n      'Must provide a valid successCallback',\n    );\n    invariant(RCTActionSheetManager, \"ActionSheetManager does't exist\");\n    RCTActionSheetManager.showShareActionSheetWithOptions(\n      {...options, tintColor: processColor(options.tintColor)},\n      failureCallback,\n      successCallback,\n    );\n  },\n};\n\nmodule.exports = ActionSheetIOS;\n"]},"metadata":{},"sourceType":"module"}