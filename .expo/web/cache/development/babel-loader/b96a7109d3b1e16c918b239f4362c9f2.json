{"ast":null,"code":"'use strict';\n\nimport NativeVibration from \"./NativeVibration\";\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar _vibrating = false;\nvar _id = 0;\nvar _default_vibration_length = 400;\n\nfunction vibrateByPattern(pattern) {\n  var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (_vibrating) {\n    return;\n  }\n\n  _vibrating = true;\n\n  if (pattern[0] === 0) {\n    NativeVibration.vibrate(_default_vibration_length);\n    pattern = pattern.slice(1);\n  }\n\n  if (pattern.length === 0) {\n    _vibrating = false;\n    return;\n  }\n\n  setTimeout(function () {\n    return vibrateScheduler(++_id, pattern, repeat, 1);\n  }, pattern[0]);\n}\n\nfunction vibrateScheduler(id, pattern, repeat, nextIndex) {\n  if (!_vibrating || id !== _id) {\n    return;\n  }\n\n  NativeVibration.vibrate(_default_vibration_length);\n\n  if (nextIndex >= pattern.length) {\n    if (repeat) {\n      nextIndex = 0;\n    } else {\n      _vibrating = false;\n      return;\n    }\n  }\n\n  setTimeout(function () {\n    return vibrateScheduler(id, pattern, repeat, nextIndex + 1);\n  }, pattern[nextIndex]);\n}\n\nvar Vibration = {\n  vibrate: function vibrate() {\n    var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _default_vibration_length;\n    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (Platform.OS === 'android') {\n      if (typeof pattern === 'number') {\n        NativeVibration.vibrate(pattern);\n      } else if (Array.isArray(pattern)) {\n        NativeVibration.vibrateByPattern(pattern, repeat ? 0 : -1);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    } else {\n      if (_vibrating) {\n        return;\n      }\n\n      if (typeof pattern === 'number') {\n        NativeVibration.vibrate(pattern);\n      } else if (Array.isArray(pattern)) {\n        vibrateByPattern(pattern, repeat);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    }\n  },\n  cancel: function cancel() {\n    if (Platform.OS === 'ios') {\n      _vibrating = false;\n    } else {\n      NativeVibration.cancel();\n    }\n  }\n};\nmodule.exports = Vibration;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Vibration/Vibration.js"],"names":["NativeVibration","Platform","require","_vibrating","_id","_default_vibration_length","vibrateByPattern","pattern","repeat","vibrate","slice","length","setTimeout","vibrateScheduler","id","nextIndex","Vibration","OS","Array","isArray","Error","cancel","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @jsdoc\n */\n\n'use strict';\n\nimport NativeVibration from './NativeVibration';\nconst Platform = require('../Utilities/Platform');\n\n/**\n * Vibration API\n *\n * See https://reactnative.dev/docs/vibration.html\n */\n\nlet _vibrating: boolean = false;\nlet _id: number = 0; // _id is necessary to prevent race condition.\nconst _default_vibration_length = 400;\n\nfunction vibrateByPattern(pattern: Array<number>, repeat: boolean = false) {\n  if (_vibrating) {\n    return;\n  }\n  _vibrating = true;\n  if (pattern[0] === 0) {\n    NativeVibration.vibrate(_default_vibration_length);\n    pattern = pattern.slice(1);\n  }\n  if (pattern.length === 0) {\n    _vibrating = false;\n    return;\n  }\n  setTimeout(() => vibrateScheduler(++_id, pattern, repeat, 1), pattern[0]);\n}\n\nfunction vibrateScheduler(\n  id,\n  pattern: Array<number>,\n  repeat: boolean,\n  nextIndex: number,\n) {\n  if (!_vibrating || id !== _id) {\n    return;\n  }\n  NativeVibration.vibrate(_default_vibration_length);\n  if (nextIndex >= pattern.length) {\n    if (repeat) {\n      nextIndex = 0;\n    } else {\n      _vibrating = false;\n      return;\n    }\n  }\n  setTimeout(\n    () => vibrateScheduler(id, pattern, repeat, nextIndex + 1),\n    pattern[nextIndex],\n  );\n}\n\nconst Vibration = {\n  /**\n   * Trigger a vibration with specified `pattern`.\n   *\n   * See https://reactnative.dev/docs/vibration.html#vibrate\n   */\n  vibrate: function(\n    pattern: number | Array<number> = _default_vibration_length,\n    repeat: boolean = false,\n  ) {\n    if (Platform.OS === 'android') {\n      if (typeof pattern === 'number') {\n        NativeVibration.vibrate(pattern);\n      } else if (Array.isArray(pattern)) {\n        NativeVibration.vibrateByPattern(pattern, repeat ? 0 : -1);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    } else {\n      if (_vibrating) {\n        return;\n      }\n      if (typeof pattern === 'number') {\n        NativeVibration.vibrate(pattern);\n      } else if (Array.isArray(pattern)) {\n        vibrateByPattern(pattern, repeat);\n      } else {\n        throw new Error('Vibration pattern should be a number or array');\n      }\n    }\n  },\n  /**\n   * Stop vibration\n   *\n   * See https://reactnative.dev/docs/vibration.html#cancel\n   */\n  cancel: function() {\n    if (Platform.OS === 'ios') {\n      _vibrating = false;\n    } else {\n      NativeVibration.cancel();\n    }\n  },\n};\n\nmodule.exports = Vibration;\n"]},"metadata":{},"sourceType":"module"}