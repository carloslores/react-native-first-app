{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Picker/Picker.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar PickerAndroid = require(\"./PickerAndroid\");\n\nvar PickerIOS = require(\"./PickerIOS\");\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nvar React = require('react');\n\nvar UnimplementedView = require(\"../UnimplementedViews/UnimplementedView\");\n\nvar MODE_DIALOG = 'dialog';\nvar MODE_DROPDOWN = 'dropdown';\n\nvar PickerItem = function (_React$Component) {\n  _inherits(PickerItem, _React$Component);\n\n  var _super = _createSuper(PickerItem);\n\n  function PickerItem() {\n    _classCallCheck(this, PickerItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PickerItem, [{\n    key: \"render\",\n    value: function render() {\n      throw null;\n    }\n  }]);\n\n  return PickerItem;\n}(React.Component);\n\nvar Picker = function (_React$Component2) {\n  _inherits(Picker, _React$Component2);\n\n  var _super2 = _createSuper(Picker);\n\n  function Picker() {\n    _classCallCheck(this, Picker);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(Picker, [{\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'ios') {\n        return React.createElement(PickerIOS, _extends({}, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 14\n          }\n        }), this.props.children);\n      } else if (Platform.OS === 'android') {\n        return React.createElement(PickerAndroid, _extends({}, this.props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 9\n          }\n        }), this.props.children);\n      } else {\n        return React.createElement(UnimplementedView, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n\n  return Picker;\n}(React.Component);\n\nPicker.MODE_DIALOG = MODE_DIALOG;\nPicker.MODE_DROPDOWN = MODE_DROPDOWN;\nPicker.Item = PickerItem;\nPicker.defaultProps = {\n  mode: MODE_DIALOG\n};\nmodule.exports = Picker;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Picker/Picker.js"],"names":["PickerAndroid","require","PickerIOS","Platform","React","UnimplementedView","MODE_DIALOG","MODE_DROPDOWN","PickerItem","Component","Picker","OS","props","children","Item","defaultProps","mode","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,mBAA7B;;AACA,IAAMC,SAAS,GAAGD,OAAO,eAAzB;;AACA,IAAME,QAAQ,GAAGF,OAAO,4BAAxB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,2CAAjC;;AAKA,IAAMK,WAAW,GAAG,QAApB;AACA,IAAMC,aAAa,GAAG,UAAtB;;IA8BMC,U;;;;;;;;;;;;;WACJ,kBAAS;AAEP,YAAM,IAAN;AACD;;;;EAJsBJ,KAAK,CAACK,S;;IA8EzBC,M;;;;;;;;;;;;;WAiBJ,kBAAqB;AACnB,UAAIP,QAAQ,CAACQ,EAAT,KAAgB,KAApB,EAA2B;AAGzB,eAAO,oBAAC,SAAD,eAAe,KAAKC,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA4B,KAAKA,KAAL,CAAWC,QAAvC,CAAP;AACD,OAJD,MAIO,IAAIV,QAAQ,CAACQ,EAAT,KAAgB,SAApB,EAA+B;AACpC,eAGE,oBAAC,aAAD,eAAmB,KAAKC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAgC,KAAKA,KAAL,CAAWC,QAA3C,CAHF;AAKD,OANM,MAMA;AACL,eAAO,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF;;;;EA/BkBT,KAAK,CAACK,S;;AAArBC,M,CAIGJ,W,GAA2CA,W;AAJ9CI,M,CASGH,a,GAA+CA,a;AATlDG,M,CAWGI,I,GAA0BN,U;AAX7BE,M,CAaGK,Y,GAAsD;AAC3DC,EAAAA,IAAI,EAAEV;AADqD,C;AAqB/DW,MAAM,CAACC,OAAP,GAAiBR,MAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst PickerAndroid = require('./PickerAndroid');\nconst PickerIOS = require('./PickerIOS');\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst UnimplementedView = require('../UnimplementedViews/UnimplementedView');\n\nimport type {TextStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\n\nconst MODE_DIALOG = 'dialog';\nconst MODE_DROPDOWN = 'dropdown';\n\ntype PickerItemProps = $ReadOnly<{|\n  /**\n   * Text to display for this item.\n   */\n  label: string,\n\n  /**\n   * The value to be passed to picker's `onValueChange` callback when\n   * this item is selected. Can be a string or an integer.\n   */\n  value?: ?(number | string),\n\n  /**\n   * Color of this item's text.\n   * @platform android\n   */\n  color?: ColorValue,\n\n  /**\n   * Used to locate the item in end-to-end tests.\n   */\n  testID?: string,\n|}>;\n\n/**\n * Individual selectable item in a Picker.\n */\nexport type {PickerItem};\nclass PickerItem extends React.Component<PickerItemProps> {\n  render() {\n    // The items are not rendered directly\n    throw null;\n  }\n}\n\ntype PickerProps = $ReadOnly<{|\n  children?: React.Node,\n  style?: ?TextStyleProp,\n\n  /**\n   * Value matching value of one of the items. Can be a string or an integer.\n   */\n  selectedValue?: ?(number | string),\n\n  /**\n   * Callback for when an item is selected. This is called with the following parameters:\n   *   - `itemValue`: the `value` prop of the item that was selected\n   *   - `itemIndex`: the index of the selected item in this picker\n   */\n  onValueChange?: ?(itemValue: string | number, itemIndex: number) => mixed,\n\n  /**\n   * If set to false, the picker will be disabled, i.e. the user will not be able to make a\n   * selection.\n   * @platform android\n   */\n  enabled?: ?boolean,\n\n  /**\n   * On Android, specifies how to display the selection items when the user taps on the picker:\n   *\n   *   - 'dialog': Show a modal dialog. This is the default.\n   *   - 'dropdown': Shows a dropdown anchored to the picker view\n   *\n   * @platform android\n   */\n  mode?: ?('dialog' | 'dropdown'),\n\n  /**\n   * Style to apply to each of the item labels.\n   * @platform ios\n   */\n  itemStyle?: ?TextStyleProp,\n\n  /**\n   * Color of the item background.\n   * @platform android\n   */\n  backgroundColor?: ColorValue,\n\n  /**\n   * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.\n   * @platform android\n   */\n  prompt?: ?string,\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: ?string,\n  /**\n   * The string used for the accessibility label. Will be read once focused on the picker but not on change.\n   */\n  accessibilityLabel?: ?string,\n|}>;\n\n/**\n * Renders the native picker component on iOS and Android. Example:\n *\n *     <Picker\n *       selectedValue={this.state.language}\n *       onValueChange={(itemValue, itemIndex) => this.setState({language: itemValue})}>\n *       <Picker.Item label=\"Java\" value=\"java\" />\n *       <Picker.Item label=\"JavaScript\" value=\"js\" />\n *     </Picker>\n */\nclass Picker extends React.Component<PickerProps> {\n  /**\n   * On Android, display the options in a dialog.\n   */\n  static MODE_DIALOG: $TEMPORARY$string<'dialog'> = MODE_DIALOG;\n\n  /**\n   * On Android, display the options in a dropdown (this is the default).\n   */\n  static MODE_DROPDOWN: $TEMPORARY$string<'dropdown'> = MODE_DROPDOWN;\n\n  static Item: typeof PickerItem = PickerItem;\n\n  static defaultProps: {|mode: $TEMPORARY$string<'dialog'>|} = {\n    mode: MODE_DIALOG,\n  };\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      /* $FlowFixMe(>=0.81.0 site=react_native_ios_fb) This suppression was\n       * added when renaming suppression sites. */\n      return <PickerIOS {...this.props}>{this.props.children}</PickerIOS>;\n    } else if (Platform.OS === 'android') {\n      return (\n        /* $FlowFixMe(>=0.81.0 site=react_native_android_fb) This suppression\n         * was added when renaming suppression sites. */\n        <PickerAndroid {...this.props}>{this.props.children}</PickerAndroid>\n      );\n    } else {\n      return <UnimplementedView />;\n    }\n  }\n}\n\nmodule.exports = Picker;\n"]},"metadata":{},"sourceType":"script"}