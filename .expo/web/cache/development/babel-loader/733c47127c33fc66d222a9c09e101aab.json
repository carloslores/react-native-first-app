{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar NativeEventEmitter = require(\"../EventEmitter/NativeEventEmitter\");\n\nimport NativePushNotificationManagerIOS from \"./NativePushNotificationManagerIOS\";\n\nvar invariant = require('invariant');\n\nvar PushNotificationEmitter = new NativeEventEmitter(NativePushNotificationManagerIOS);\n\nvar _notifHandlers = new Map();\n\nvar DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nvar NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nvar NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nvar DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nvar PushNotificationIOS = function () {\n  function PushNotificationIOS(nativeNotif) {\n    var _this = this;\n\n    _classCallCheck(this, PushNotificationIOS);\n\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    if (nativeNotif.remote) {\n      Object.keys(nativeNotif).forEach(function (notifKey) {\n        var notifVal = nativeNotif[notifKey];\n\n        if (notifKey === 'aps') {\n          _this._alert = notifVal.alert;\n          _this._sound = notifVal.sound;\n          _this._badgeCount = notifVal.badge;\n          _this._category = notifVal.category;\n          _this._contentAvailable = notifVal['content-available'];\n          _this._threadID = notifVal['thread-id'];\n        } else {\n          _this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      this._badgeCount = nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.soundName;\n      this._alert = nativeNotif.alertBody;\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n    }\n  }\n\n  _createClass(PushNotificationIOS, [{\n    key: \"finish\",\n    value: function finish(fetchResult) {\n      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {\n        return;\n      }\n\n      this._remoteNotificationCompleteCallbackCalled = true;\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.onFinishRemoteNotification(this._notificationId, fetchResult);\n    }\n  }, {\n    key: \"getMessage\",\n    value: function getMessage() {\n      return this._alert;\n    }\n  }, {\n    key: \"getSound\",\n    value: function getSound() {\n      return this._sound;\n    }\n  }, {\n    key: \"getCategory\",\n    value: function getCategory() {\n      return this._category;\n    }\n  }, {\n    key: \"getAlert\",\n    value: function getAlert() {\n      return this._alert;\n    }\n  }, {\n    key: \"getContentAvailable\",\n    value: function getContentAvailable() {\n      return this._contentAvailable;\n    }\n  }, {\n    key: \"getBadgeCount\",\n    value: function getBadgeCount() {\n      return this._badgeCount;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this._data;\n    }\n  }, {\n    key: \"getThreadID\",\n    value: function getThreadID() {\n      return this._threadID;\n    }\n  }], [{\n    key: \"presentLocalNotification\",\n    value: function presentLocalNotification(details) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.presentLocalNotification(details);\n    }\n  }, {\n    key: \"scheduleLocalNotification\",\n    value: function scheduleLocalNotification(details) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.scheduleLocalNotification(details);\n    }\n  }, {\n    key: \"cancelAllLocalNotifications\",\n    value: function cancelAllLocalNotifications() {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.cancelAllLocalNotifications();\n    }\n  }, {\n    key: \"removeAllDeliveredNotifications\",\n    value: function removeAllDeliveredNotifications() {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.removeAllDeliveredNotifications();\n    }\n  }, {\n    key: \"getDeliveredNotifications\",\n    value: function getDeliveredNotifications(callback) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.getDeliveredNotifications(callback);\n    }\n  }, {\n    key: \"removeDeliveredNotifications\",\n    value: function removeDeliveredNotifications(identifiers) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.removeDeliveredNotifications(identifiers);\n    }\n  }, {\n    key: \"setApplicationIconBadgeNumber\",\n    value: function setApplicationIconBadgeNumber(number) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.setApplicationIconBadgeNumber(number);\n    }\n  }, {\n    key: \"getApplicationIconBadgeNumber\",\n    value: function getApplicationIconBadgeNumber(callback) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.getApplicationIconBadgeNumber(callback);\n    }\n  }, {\n    key: \"cancelLocalNotifications\",\n    value: function cancelLocalNotifications(userInfo) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.cancelLocalNotifications(userInfo);\n    }\n  }, {\n    key: \"getScheduledLocalNotifications\",\n    value: function getScheduledLocalNotifications(callback) {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.getScheduledLocalNotifications(callback);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');\n      var listener;\n\n      if (type === 'notification') {\n        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {\n          handler(new PushNotificationIOS(notifData));\n        });\n      } else if (type === 'localNotification') {\n        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {\n          handler(new PushNotificationIOS(notifData));\n        });\n      } else if (type === 'register') {\n        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {\n          handler(registrationInfo.deviceToken);\n        });\n      } else if (type === 'registrationError') {\n        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {\n          handler(errorInfo);\n        });\n      }\n\n      _notifHandlers.set(type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');\n\n      var listener = _notifHandlers.get(type);\n\n      if (!listener) {\n        return;\n      }\n\n      listener.remove();\n\n      _notifHandlers.delete(type);\n    }\n  }, {\n    key: \"requestPermissions\",\n    value: function requestPermissions(permissions) {\n      var requestedPermissions = {\n        alert: true,\n        badge: true,\n        sound: true\n      };\n\n      if (permissions) {\n        requestedPermissions = {\n          alert: !!permissions.alert,\n          badge: !!permissions.badge,\n          sound: !!permissions.sound\n        };\n      }\n\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      return NativePushNotificationManagerIOS.requestPermissions(requestedPermissions);\n    }\n  }, {\n    key: \"abandonPermissions\",\n    value: function abandonPermissions() {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.abandonPermissions();\n    }\n  }, {\n    key: \"checkPermissions\",\n    value: function checkPermissions(callback) {\n      invariant(typeof callback === 'function', 'Must provide a valid callback');\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      NativePushNotificationManagerIOS.checkPermissions(callback);\n    }\n  }, {\n    key: \"getInitialNotification\",\n    value: function getInitialNotification() {\n      invariant(NativePushNotificationManagerIOS, 'PushNotificationManager is not available.');\n      return NativePushNotificationManagerIOS.getInitialNotification().then(function (notification) {\n        return notification && new PushNotificationIOS(notification);\n      });\n    }\n  }]);\n\n  return PushNotificationIOS;\n}();\n\nPushNotificationIOS.FetchResult = {\n  NewData: 'UIBackgroundFetchResultNewData',\n  NoData: 'UIBackgroundFetchResultNoData',\n  ResultFailed: 'UIBackgroundFetchResultFailed'\n};\nmodule.exports = PushNotificationIOS;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js"],"names":["NativeEventEmitter","require","NativePushNotificationManagerIOS","invariant","PushNotificationEmitter","_notifHandlers","Map","DEVICE_NOTIF_EVENT","NOTIF_REGISTER_EVENT","NOTIF_REGISTRATION_ERROR_EVENT","DEVICE_LOCAL_NOTIF_EVENT","PushNotificationIOS","nativeNotif","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","Object","keys","forEach","notifKey","notifVal","_alert","alert","_sound","sound","_badgeCount","badge","_category","category","_contentAvailable","_threadID","applicationIconBadgeNumber","soundName","alertBody","userInfo","fetchResult","onFinishRemoteNotification","details","presentLocalNotification","scheduleLocalNotification","cancelAllLocalNotifications","removeAllDeliveredNotifications","callback","getDeliveredNotifications","identifiers","removeDeliveredNotifications","number","setApplicationIconBadgeNumber","getApplicationIconBadgeNumber","cancelLocalNotifications","getScheduledLocalNotifications","type","handler","listener","addListener","notifData","registrationInfo","deviceToken","errorInfo","set","get","remove","delete","permissions","requestedPermissions","requestPermissions","abandonPermissions","checkPermissions","getInitialNotification","then","notification","FetchResult","NewData","NoData","ResultFailed","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\nimport NativePushNotificationManagerIOS from './NativePushNotificationManagerIOS';\nconst invariant = require('invariant');\n\nconst PushNotificationEmitter = new NativeEventEmitter(\n  NativePushNotificationManagerIOS,\n);\n\nconst _notifHandlers = new Map();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n  ...\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Keys<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs when APNS is having issues, or the device is a simulator. The\n   * handler will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n  ...\n}>;\n\n/**\n *\n * Handle push notifications for your app, including permission handling and\n * icon badge number.\n *\n * See https://reactnative.dev/docs/pushnotificationios.html\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | Object;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n  _threadID: string;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  /**\n   * Schedules the localNotification for immediate presentation.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#presentlocalnotification\n   */\n  static presentLocalNotification(details: Object) {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules the localNotification for future presentation.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#schedulelocalnotification\n   */\n  static scheduleLocalNotification(details: Object) {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Cancels all scheduled localNotifications.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#cancelalllocalnotifications\n   */\n  static cancelAllLocalNotifications() {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Remove all delivered notifications from Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removealldeliverednotifications\n   */\n  static removeAllDeliveredNotifications(): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides you with a list of the app’s notifications that are still displayed in Notification Center.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getdeliverednotifications\n   */\n  static getDeliveredNotifications(\n    callback: (notifications: Array<Object>) => void,\n  ): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removedeliverednotifications\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#setapplicationiconbadgenumber\n   */\n  static setApplicationIconBadgeNumber(number: number) {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the home screen.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getapplicationiconbadgenumber\n   */\n  static getApplicationIconBadgeNumber(callback: Function) {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancel local notifications.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#cancellocalnotification\n   */\n  static cancelLocalNotifications(userInfo: Object) {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the local notifications that are currently scheduled.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getscheduledlocalnotifications\n   */\n  static getScheduledLocalNotifications(callback: Function) {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Attaches a listener to remote or local notification events while the app\n   * is running in the foreground or the background.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#addeventlistener\n   */\n  static addEventListener(type: PushNotificationEventName, handler: Function) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    let listener;\n    if (type === 'notification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        notifData => {\n          handler(new PushNotificationIOS(notifData));\n        },\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        registrationInfo => {\n          handler(registrationInfo.deviceToken);\n        },\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        errorInfo => {\n          handler(errorInfo);\n        },\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#removeeventlistener\n   */\n  static removeEventListener(\n    type: PushNotificationEventName,\n    handler: Function,\n  ) {\n    invariant(\n      type === 'notification' ||\n        type === 'register' ||\n        type === 'registrationError' ||\n        type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events',\n    );\n    const listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user's\n   * dialog box. By default, it will request all notification permissions, but\n   * a subset of these can be requested by passing a map of requested\n   * permissions.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#requestpermissions\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean,\n    ...\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean,\n    ...\n  }> {\n    let requestedPermissions = {\n      alert: true,\n      badge: true,\n      sound: true,\n    };\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound,\n      };\n    }\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    return NativePushNotificationManagerIOS.requestPermissions(\n      requestedPermissions,\n    );\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification service.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#abandonpermissions\n   */\n  static abandonPermissions() {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.abandonPermissions();\n  }\n\n  /**\n   * See what push permissions are currently enabled. `callback` will be\n   * invoked with a `permissions` object.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#checkpermissions\n   */\n  static checkPermissions(callback: Function) {\n    invariant(typeof callback === 'function', 'Must provide a valid callback');\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getinitialnotification\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    return NativePushNotificationManagerIOS.getInitialNotification().then(\n      notification => {\n        return notification && new PushNotificationIOS(notification);\n      },\n    );\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient\n   *\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html\n      Object.keys(nativeNotif).forEach(notifKey => {\n        const notifVal = nativeNotif[notifKey];\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n          this._threadID = notifVal['thread-id'];\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      this._badgeCount = nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.soundName;\n      this._alert = nativeNotif.alertBody;\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#finish\n   */\n  finish(fetchResult: string) {\n    if (\n      !this._isRemote ||\n      !this._notificationId ||\n      this._remoteNotificationCompleteCallbackCalled\n    ) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    invariant(\n      NativePushNotificationManagerIOS,\n      'PushNotificationManager is not available.',\n    );\n    NativePushNotificationManagerIOS.onFinishRemoteNotification(\n      this._notificationId,\n      fetchResult,\n    );\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string\n   */\n  getMessage(): ?string | ?Object {\n    // alias because \"alert\" is an ambiguous name\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getsound\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getcategory\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getalert\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getcontentavailable\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getbadgecount\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getdata\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n\n  /**\n   * Gets the thread ID on the notif\n   *\n   * See https://reactnative.dev/docs/pushnotificationios.html#getthreadid\n   */\n  getThreadID(): ?string {\n    return this._threadID;\n  }\n}\n\nmodule.exports = PushNotificationIOS;\n"]},"metadata":{},"sourceType":"module"}