{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Slider/Slider.js\";\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nimport SliderNativeComponent from \"./SliderNativeComponent\";\n\nvar React = require('react');\n\nvar StyleSheet = require(\"../../StyleSheet/StyleSheet\");\n\nvar Slider = function Slider(props, forwardedRef) {\n  var style = StyleSheet.compose(styles.slider, props.style);\n\n  var _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$value = props.value,\n      value = _props$value === void 0 ? 0.5 : _props$value,\n      _props$minimumValue = props.minimumValue,\n      minimumValue = _props$minimumValue === void 0 ? 0 : _props$minimumValue,\n      _props$maximumValue = props.maximumValue,\n      maximumValue = _props$maximumValue === void 0 ? 1 : _props$maximumValue,\n      _props$step = props.step,\n      step = _props$step === void 0 ? 0 : _props$step,\n      onValueChange = props.onValueChange,\n      onSlidingComplete = props.onSlidingComplete,\n      localProps = _objectWithoutProperties(props, [\"disabled\", \"value\", \"minimumValue\", \"maximumValue\", \"step\", \"onValueChange\", \"onSlidingComplete\"]);\n\n  var onValueChangeEvent = onValueChange ? function (event) {\n    var userEvent = true;\n\n    if (Platform.OS === 'android') {\n      userEvent = event.nativeEvent.fromUser != null && event.nativeEvent.fromUser;\n    }\n\n    userEvent && onValueChange(event.nativeEvent.value);\n  } : null;\n  var onChangeEvent = onValueChangeEvent;\n  var onSlidingCompleteEvent = onSlidingComplete ? function (event) {\n    onSlidingComplete(event.nativeEvent.value);\n  } : null;\n  return React.createElement(SliderNativeComponent, _extends({}, localProps, {\n    enabled: !disabled,\n    disabled: disabled,\n    maximumValue: maximumValue,\n    minimumValue: minimumValue,\n    onChange: onChangeEvent,\n    onResponderTerminationRequest: function onResponderTerminationRequest() {\n      return false;\n    },\n    onSlidingComplete: onSlidingCompleteEvent,\n    onStartShouldSetResponder: function onStartShouldSetResponder() {\n      return true;\n    },\n    onValueChange: onValueChangeEvent,\n    ref: forwardedRef,\n    step: step,\n    style: style,\n    value: value,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 5\n    }\n  }));\n};\n\nvar SliderWithRef = React.forwardRef(Slider);\nvar styles;\n\nif (Platform.OS === 'ios') {\n  styles = StyleSheet.create({\n    slider: {\n      height: 40\n    }\n  });\n} else {\n  styles = StyleSheet.create({\n    slider: {}\n  });\n}\n\nmodule.exports = SliderWithRef;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Slider/Slider.js"],"names":["Platform","require","SliderNativeComponent","React","StyleSheet","Slider","props","forwardedRef","style","compose","styles","slider","disabled","value","minimumValue","maximumValue","step","onValueChange","onSlidingComplete","localProps","onValueChangeEvent","event","userEvent","OS","nativeEvent","fromUser","onChangeEvent","onSlidingCompleteEvent","SliderWithRef","forwardRef","create","height","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nimport SliderNativeComponent from './SliderNativeComponent';\nconst React = require('react');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\n\nimport type {ImageSource} from '../../Image/ImageSource';\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\n\ntype Event = SyntheticEvent<\n  $ReadOnly<{|\n    value: number,\n    /**\n     * Android Only.\n     */\n    fromUser?: boolean,\n  |}>,\n>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * Assigns a single image for the track. Only static images are supported.\n   * The center pixel of the image will be stretched to fill the track.\n   */\n  trackImage?: ?ImageSource,\n\n  /**\n   * Assigns a minimum track image. Only static images are supported. The\n   * rightmost pixel of the image will be stretched to fill the track.\n   */\n  minimumTrackImage?: ?ImageSource,\n\n  /**\n   * Assigns a maximum track image. Only static images are supported. The\n   * leftmost pixel of the image will be stretched to fill the track.\n   */\n  maximumTrackImage?: ?ImageSource,\n\n  /**\n   * Sets an image for the thumb. Only static images are supported.\n   */\n  thumbImage?: ?ImageSource,\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n\n  /**\n   * Used to style and layout the `Slider`.  See `StyleSheet.js` and\n   * `DeprecatedViewStylePropTypes.js` for more info.\n   */\n  style?: ?ViewStyleProp,\n\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, you don't need to update the\n   * value during dragging.\n   */\n  value?: ?number,\n\n  /**\n   * Step value of the slider. The value should be\n   * between 0 and (maximumValue - minimumValue).\n   * Default value is 0.\n   */\n  step?: ?number,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue?: ?number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue?: ?number,\n\n  /**\n   * The color used for the track to the left of the button.\n   * Overrides the default blue gradient image on iOS.\n   */\n  minimumTrackTintColor?: ?ColorValue,\n\n  /**\n   * The color used for the track to the right of the button.\n   * Overrides the default blue gradient image on iOS.\n   */\n  maximumTrackTintColor?: ?ColorValue,\n  /**\n   * The color used to tint the default thumb images on iOS, or the\n   * color of the foreground switch grip on Android.\n   */\n  thumbTintColor?: ?ColorValue,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange?: ?(value: number) => void,\n\n  /**\n   * Callback that is called when the user releases the slider,\n   * regardless if the value has changed. The current value is passed\n   * as an argument to the callback handler.\n   */\n  onSlidingComplete?: ?(value: number) => void,\n\n  /**\n   * Used to locate this view in UI automation tests.\n   */\n  testID?: ?string,\n|}>;\n\n/**\n * A component used to select a single value from a range of values.\n *\n * ### Usage\n *\n * The example below shows how to use `Slider` to change\n * a value used by `Text`. The value is stored using\n * the state of the root component (`App`). The same component\n * subscribes to the `onValueChange`  of `Slider` and changes\n * the value using `setState`.\n *\n *```\n * import React from 'react';\n * import { StyleSheet, Text, View, Slider } from 'react-native';\n *\n * export default class App extends React.Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       value: 50\n *     }\n *   }\n *\n *   change(value) {\n *     this.setState(() => {\n *       return {\n *         value: parseFloat(value)\n *       };\n *     });\n *   }\n *\n *   render() {\n *     const {value} = this.state;\n *     return (\n *       <View style={styles.container}>\n *         <Text style={styles.text}>{String(value)}</Text>\n *         <Slider\n *           step={1}\n *           maximumValue={100}\n *           onValueChange={this.change.bind(this)}\n *           value={value} />\n *       </View>\n *     );\n *   }\n * }\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     flexDirection: 'column',\n *     justifyContent: 'center'\n *   },\n *   text: {\n *     fontSize: 50,\n *     textAlign: 'center'\n *   }\n * });\n *```\n *\n */\nconst Slider = (\n  props: Props,\n  forwardedRef?: ?React.Ref<typeof SliderNativeComponent>,\n) => {\n  const style = StyleSheet.compose(\n    styles.slider,\n    props.style,\n  );\n\n  const {\n    disabled = false,\n    value = 0.5,\n    minimumValue = 0,\n    maximumValue = 1,\n    step = 0,\n    onValueChange,\n    onSlidingComplete,\n    ...localProps\n  } = props;\n\n  const onValueChangeEvent = onValueChange\n    ? (event: Event) => {\n        let userEvent = true;\n        if (Platform.OS === 'android') {\n          // On Android there's a special flag telling us the user is\n          // dragging the slider.\n          userEvent =\n            event.nativeEvent.fromUser != null && event.nativeEvent.fromUser;\n        }\n        userEvent && onValueChange(event.nativeEvent.value);\n      }\n    : null;\n\n  const onChangeEvent = onValueChangeEvent;\n  const onSlidingCompleteEvent = onSlidingComplete\n    ? (event: Event) => {\n        onSlidingComplete(event.nativeEvent.value);\n      }\n    : null;\n\n  return (\n    <SliderNativeComponent\n      {...localProps}\n      // TODO: Reconcile these across the two platforms.\n      enabled={!disabled}\n      disabled={disabled}\n      maximumValue={maximumValue}\n      minimumValue={minimumValue}\n      onChange={onChangeEvent}\n      onResponderTerminationRequest={() => false}\n      onSlidingComplete={onSlidingCompleteEvent}\n      onStartShouldSetResponder={() => true}\n      onValueChange={onValueChangeEvent}\n      ref={forwardedRef}\n      step={step}\n      style={style}\n      value={value}\n    />\n  );\n};\n\nconst SliderWithRef: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof SliderNativeComponent>,\n> = React.forwardRef(Slider);\n\nlet styles;\nif (Platform.OS === 'ios') {\n  styles = StyleSheet.create({\n    slider: {\n      height: 40,\n    },\n  });\n} else {\n  styles = StyleSheet.create({\n    slider: {},\n  });\n}\n\nmodule.exports = SliderWithRef;\n"]},"metadata":{},"sourceType":"module"}