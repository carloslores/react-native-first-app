{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar InteractionManager = require(\"../Interaction/InteractionManager\");\n\nvar NativeEventEmitter = require(\"../EventEmitter/NativeEventEmitter\");\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar invariant = require('invariant');\n\nimport NativeLinking from \"./NativeLinking\";\n\nvar Linking = function (_NativeEventEmitter) {\n  _inherits(Linking, _NativeEventEmitter);\n\n  var _super = _createSuper(Linking);\n\n  function Linking() {\n    _classCallCheck(this, Linking);\n\n    return _super.call(this, NativeLinking);\n  }\n\n  _createClass(Linking, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      this.addListener(type, handler);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      this.removeListener(type, handler);\n    }\n  }, {\n    key: \"openURL\",\n    value: function openURL(url) {\n      this._validateURL(url);\n\n      return NativeLinking.openURL(url);\n    }\n  }, {\n    key: \"canOpenURL\",\n    value: function canOpenURL(url) {\n      this._validateURL(url);\n\n      return NativeLinking.canOpenURL(url);\n    }\n  }, {\n    key: \"openSettings\",\n    value: function openSettings() {\n      return NativeLinking.openSettings();\n    }\n  }, {\n    key: \"getInitialURL\",\n    value: function getInitialURL() {\n      return Platform.OS === 'android' ? InteractionManager.runAfterInteractions().then(function () {\n        return NativeLinking.getInitialURL();\n      }) : NativeLinking.getInitialURL();\n    }\n  }, {\n    key: \"sendIntent\",\n    value: function sendIntent(action, extras) {\n      if (Platform.OS === 'android') {\n        return NativeLinking.sendIntent(action, extras);\n      }\n\n      return new Promise(function (resolve, reject) {\n        return reject(new Error('Unsupported'));\n      });\n    }\n  }, {\n    key: \"_validateURL\",\n    value: function _validateURL(url) {\n      invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n      invariant(url, 'Invalid URL: cannot be empty');\n    }\n  }]);\n\n  return Linking;\n}(NativeEventEmitter);\n\nmodule.exports = new Linking();","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Linking/Linking.js"],"names":["InteractionManager","require","NativeEventEmitter","Platform","invariant","NativeLinking","Linking","type","handler","addListener","removeListener","url","_validateURL","openURL","canOpenURL","openSettings","OS","runAfterInteractions","then","getInitialURL","action","extras","sendIntent","Promise","resolve","reject","Error","module","exports"],"mappings":"AAUA;;;;;;;;;;;;AAEA,IAAMA,kBAAkB,GAAGC,OAAO,qCAAlC;;AACA,IAAMC,kBAAkB,GAAGD,OAAO,sCAAlC;;AACA,IAAME,QAAQ,GAAGF,OAAO,yBAAxB;;AAEA,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AAEA,OAAOI,aAAP;;IAQMC,O;;;;;AACJ,qBAAc;AAAA;;AAAA,6BACND,aADM;AAEb;;;;WAQD,0BAAiBE,IAAjB,EAA+BC,OAA/B,EAAkD;AAChD,WAAKC,WAAL,CAAiBF,IAAjB,EAAuBC,OAAvB;AACD;;;WAOD,6BAAoBD,IAApB,EAAkCC,OAAlC,EAAqD;AACnD,WAAKE,cAAL,CAAoBH,IAApB,EAA0BC,OAA1B;AACD;;;WAOD,iBAAQG,GAAR,EAAmC;AACjC,WAAKC,YAAL,CAAkBD,GAAlB;;AACA,aAAON,aAAa,CAACQ,OAAd,CAAsBF,GAAtB,CAAP;AACD;;;WAOD,oBAAWA,GAAX,EAA0C;AACxC,WAAKC,YAAL,CAAkBD,GAAlB;;AACA,aAAON,aAAa,CAACS,UAAd,CAAyBH,GAAzB,CAAP;AACD;;;WAOD,wBAA6B;AAC3B,aAAON,aAAa,CAACU,YAAd,EAAP;AACD;;;WAQD,yBAAkC;AAChC,aAAOZ,QAAQ,CAACa,EAAT,KAAgB,SAAhB,GACHhB,kBAAkB,CAACiB,oBAAnB,GAA0CC,IAA1C,CAA+C;AAAA,eAC7Cb,aAAa,CAACc,aAAd,EAD6C;AAAA,OAA/C,CADG,GAIHd,aAAa,CAACc,aAAd,EAJJ;AAKD;;;WASD,oBACEC,MADF,EAEEC,MAFF,EAOiB;AACf,UAAIlB,QAAQ,CAACa,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAOX,aAAa,CAACiB,UAAd,CAAyBF,MAAzB,EAAiCC,MAAjC,CAAP;AACD;;AACD,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,eAAqBA,MAAM,CAAC,IAAIC,KAAJ,CAAU,aAAV,CAAD,CAA3B;AAAA,OAAZ,CAAP;AACD;;;WAED,sBAAaf,GAAb,EAA0B;AACxBP,MAAAA,SAAS,CACP,OAAOO,GAAP,KAAe,QADR,EAEP,2CAA2CA,GAFpC,CAAT;AAIAP,MAAAA,SAAS,CAACO,GAAD,EAAM,8BAAN,CAAT;AACD;;;;EA9FmBT,kB;;AAiGtByB,MAAM,CAACC,OAAP,GAAkB,IAAItB,OAAJ,EAAlB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst InteractionManager = require('../Interaction/InteractionManager');\nconst NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\nconst Platform = require('../Utilities/Platform');\n\nconst invariant = require('invariant');\n\nimport NativeLinking from './NativeLinking';\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://reactnative.dev/docs/linking.html\n */\nclass Linking extends NativeEventEmitter {\n  constructor() {\n    super(NativeLinking);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://reactnative.dev/docs/linking.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    this.addListener(type, handler);\n  }\n\n  /**\n   * Remove a handler by passing the `url` event type and the handler.\n   *\n   * See https://reactnative.dev/docs/linking.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    this.removeListener(type, handler);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://reactnative.dev/docs/linking.html#openurl\n   */\n  openURL(url: string): Promise<any> {\n    this._validateURL(url);\n    return NativeLinking.openURL(url);\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://reactnative.dev/docs/linking.html#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    return NativeLinking.canOpenURL(url);\n  }\n\n  /**\n   * Open app settings.\n   *\n   * See https://reactnative.dev/docs/linking.html#opensettings\n   */\n  openSettings(): Promise<any> {\n    return NativeLinking.openSettings();\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://reactnative.dev/docs/linking.html#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return Platform.OS === 'android'\n      ? InteractionManager.runAfterInteractions().then(() =>\n          NativeLinking.getInitialURL(),\n        )\n      : NativeLinking.getInitialURL();\n  }\n\n  /*\n   * Launch an Android intent with extras (optional)\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/linking.html#sendintent\n   */\n  sendIntent(\n    action: string,\n    extras?: Array<{\n      key: string,\n      value: string | number | boolean,\n      ...\n    }>,\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return NativeLinking.sendIntent(action, extras);\n    }\n    return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n  }\n\n  _validateURL(url: string) {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = (new Linking(): Linking);\n"]},"metadata":{},"sourceType":"module"}