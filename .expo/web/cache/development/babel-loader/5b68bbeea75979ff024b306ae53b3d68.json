{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Pressable/Pressable.js\";\nimport * as React from 'react';\nimport { useMemo, useState, useRef, useImperativeHandle } from 'react';\nimport useAndroidRippleForView from \"./useAndroidRippleForView\";\nimport { PressabilityDebugView } from \"../../Pressability/PressabilityDebug\";\nimport usePressability from \"../../Pressability/usePressability\";\nimport { normalizeRect } from \"../../StyleSheet/Rect\";\nimport View from \"../View/View\";\n\nfunction Pressable(props, forwardedRef) {\n  var accessible = props.accessible,\n      android_disableSound = props.android_disableSound,\n      android_ripple = props.android_ripple,\n      children = props.children,\n      delayLongPress = props.delayLongPress,\n      disabled = props.disabled,\n      focusable = props.focusable,\n      onLongPress = props.onLongPress,\n      onPress = props.onPress,\n      _onPressIn = props.onPressIn,\n      _onPressOut = props.onPressOut,\n      pressRetentionOffset = props.pressRetentionOffset,\n      style = props.style,\n      testOnly_pressed = props.testOnly_pressed,\n      unstable_pressDelay = props.unstable_pressDelay,\n      restProps = _objectWithoutProperties(props, [\"accessible\", \"android_disableSound\", \"android_ripple\", \"children\", \"delayLongPress\", \"disabled\", \"focusable\", \"onLongPress\", \"onPress\", \"onPressIn\", \"onPressOut\", \"pressRetentionOffset\", \"style\", \"testOnly_pressed\", \"unstable_pressDelay\"]);\n\n  var viewRef = useRef(null);\n  useImperativeHandle(forwardedRef, function () {\n    return viewRef.current;\n  });\n  var android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  var _usePressState = usePressState(testOnly_pressed === true),\n      _usePressState2 = _slicedToArray(_usePressState, 2),\n      pressed = _usePressState2[0],\n      setPressed = _usePressState2[1];\n\n  var hitSlop = normalizeRect(props.hitSlop);\n  var config = useMemo(function () {\n    return {\n      disabled: disabled,\n      hitSlop: hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound: android_disableSound,\n      delayLongPress: delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onLongPress: onLongPress,\n      onPress: onPress,\n      onPressIn: function onPressIn(event) {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n\n        setPressed(true);\n\n        if (_onPressIn != null) {\n          _onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig == null ? void 0 : android_rippleConfig.onPressMove,\n      onPressOut: function onPressOut(event) {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n\n        setPressed(false);\n\n        if (_onPressOut != null) {\n          _onPressOut(event);\n        }\n      }\n    };\n  }, [android_disableSound, android_rippleConfig, delayLongPress, disabled, hitSlop, onLongPress, onPress, _onPressIn, _onPressOut, pressRetentionOffset, setPressed, unstable_pressDelay]);\n  var eventHandlers = usePressability(config);\n  return React.createElement(View, _extends({}, restProps, eventHandlers, android_rippleConfig == null ? void 0 : android_rippleConfig.viewProps, {\n    accessible: accessible !== false,\n    focusable: focusable !== false,\n    hitSlop: hitSlop,\n    ref: viewRef,\n    style: typeof style === 'function' ? style({\n      pressed: pressed\n    }) : style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }\n  }), typeof children === 'function' ? children({\n    pressed: pressed\n  }) : children, __DEV__ ? React.createElement(PressabilityDebugView, {\n    color: \"red\",\n    hitSlop: hitSlop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nfunction usePressState(forcePressed) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  return [pressed || forcePressed, setPressed];\n}\n\nvar MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\nexport default MemoedPressable;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Pressable/Pressable.js"],"names":["React","useMemo","useState","useRef","useImperativeHandle","useAndroidRippleForView","PressabilityDebugView","usePressability","normalizeRect","View","Pressable","props","forwardedRef","accessible","android_disableSound","android_ripple","children","delayLongPress","disabled","focusable","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","style","testOnly_pressed","unstable_pressDelay","restProps","viewRef","current","android_rippleConfig","usePressState","pressed","setPressed","hitSlop","config","pressRectOffset","delayPressIn","event","onPressMove","eventHandlers","viewProps","__DEV__","forcePressed","MemoedPressable","memo","forwardRef","displayName"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {useMemo, useState, useRef, useImperativeHandle} from 'react';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {normalizeRect, type RectOrSize} from '../../StyleSheet/Rect';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {LayoutEvent, PressEvent} from '../../Types/CoreEventTypes';\nimport View from '../View/View';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  accessibilityViewIsModal?: ?boolean,\n  accessible?: ?boolean,\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => void,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => void,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => void,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  unstable_pressDelay?: ?number,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    android_disableSound,\n    android_ripple,\n    children,\n    delayLongPress,\n    disabled,\n    focusable,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    unstable_pressDelay,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  useImperativeHandle(forwardedRef, () => viewRef.current);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  const hitSlop = normalizeRect(props.hitSlop);\n\n  const config = useMemo(\n    () => ({\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n      unstable_pressDelay,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restProps}\n      {...eventHandlers}\n      {...android_rippleConfig?.viewProps}\n      accessible={accessible !== false}\n      focusable={focusable !== false}\n      hitSlop={hitSlop}\n      ref={viewRef}\n      style={typeof style === 'function' ? style({pressed}) : style}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n"]},"metadata":{},"sourceType":"module"}