{"ast":null,"code":"'use strict';\n\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Switch/Switch.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Platform from \"../../Utilities/Platform\";\nimport * as React from 'react';\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport AndroidSwitchNativeComponent, { Commands as AndroidSwitchCommands } from \"./AndroidSwitchNativeComponent\";\nimport SwitchNativeComponent, { Commands as SwitchCommands } from \"./SwitchNativeComponent\";\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  var _super = _createSuper(Switch);\n\n  function Switch() {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handleChange = function (event) {\n      if (_this.props.onChange != null) {\n        _this.props.onChange(event);\n      }\n\n      if (_this.props.onValueChange != null) {\n        _this.props.onValueChange(event.nativeEvent.value);\n      }\n\n      _this._lastNativeValue = event.nativeEvent.value;\n\n      _this.forceUpdate();\n    };\n\n    _this._handleSwitchNativeComponentRef = function (ref) {\n      _this._nativeSwitchRef = ref;\n    };\n\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"render\",\n    value: function render() {\n      var _props$accessibilityR2;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          ios_backgroundColor = _this$props.ios_backgroundColor,\n          onChange = _this$props.onChange,\n          onValueChange = _this$props.onValueChange,\n          style = _this$props.style,\n          thumbColor = _this$props.thumbColor,\n          trackColor = _this$props.trackColor,\n          value = _this$props.value,\n          props = _objectWithoutProperties(_this$props, [\"disabled\", \"ios_backgroundColor\", \"onChange\", \"onValueChange\", \"style\", \"thumbColor\", \"trackColor\", \"value\"]);\n\n      var trackColorForFalse = trackColor == null ? void 0 : trackColor.false;\n      var trackColorForTrue = trackColor == null ? void 0 : trackColor.true;\n\n      if (Platform.OS === 'android') {\n        var _props$accessibilityR;\n\n        var _platformProps = {\n          enabled: disabled !== true,\n          on: value === true,\n          style: style,\n          thumbTintColor: thumbColor,\n          trackColorForFalse: trackColorForFalse,\n          trackColorForTrue: trackColorForTrue,\n          trackTintColor: value === true ? trackColorForTrue : trackColorForFalse\n        };\n        return React.createElement(AndroidSwitchNativeComponent, _extends({}, props, _platformProps, {\n          accessibilityRole: (_props$accessibilityR = props.accessibilityRole) != null ? _props$accessibilityR : 'switch',\n          onChange: this._handleChange,\n          onResponderTerminationRequest: returnsFalse,\n          onStartShouldSetResponder: returnsTrue,\n          ref: this._handleSwitchNativeComponentRef,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      var platformProps = {\n        disabled: disabled,\n        onTintColor: trackColorForTrue,\n        style: StyleSheet.compose({\n          height: 31,\n          width: 51\n        }, StyleSheet.compose(style, ios_backgroundColor == null ? null : {\n          backgroundColor: ios_backgroundColor,\n          borderRadius: 16\n        })),\n        thumbTintColor: thumbColor,\n        tintColor: trackColorForFalse,\n        value: value === true\n      };\n      return React.createElement(SwitchNativeComponent, _extends({}, props, platformProps, {\n        accessibilityRole: (_props$accessibilityR2 = props.accessibilityRole) != null ? _props$accessibilityR2 : 'switch',\n        onChange: this._handleChange,\n        onResponderTerminationRequest: returnsFalse,\n        onStartShouldSetResponder: returnsTrue,\n        ref: this._handleSwitchNativeComponentRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var nativeProps = {};\n      var value = this.props.value === true;\n\n      if (this._lastNativeValue !== value) {\n        nativeProps.value = value;\n      }\n\n      if (Object.keys(nativeProps).length > 0 && this._nativeSwitchRef && this._nativeSwitchRef.setNativeProps) {\n        if (Platform.OS === 'android') {\n          AndroidSwitchCommands.setNativeValue(this._nativeSwitchRef, nativeProps.value);\n        } else {\n          SwitchCommands.setValue(this._nativeSwitchRef, nativeProps.value);\n        }\n      }\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nvar returnsFalse = function returnsFalse() {\n  return false;\n};\n\nvar returnsTrue = function returnsTrue() {\n  return true;\n};\n\nmodule.exports = Switch;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Switch/Switch.js"],"names":["Platform","React","StyleSheet","AndroidSwitchNativeComponent","Commands","AndroidSwitchCommands","SwitchNativeComponent","SwitchCommands","Switch","_handleChange","event","props","onChange","onValueChange","nativeEvent","value","_lastNativeValue","forceUpdate","_handleSwitchNativeComponentRef","ref","_nativeSwitchRef","disabled","ios_backgroundColor","style","thumbColor","trackColor","trackColorForFalse","false","trackColorForTrue","true","OS","platformProps","enabled","on","thumbTintColor","trackTintColor","accessibilityRole","returnsFalse","returnsTrue","onTintColor","compose","height","width","backgroundColor","borderRadius","tintColor","nativeProps","Object","keys","length","setNativeProps","setNativeValue","setValue","Component","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @generate-docs\n */\n\n'use strict';\n\nimport Platform from '../../Utilities/Platform';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\n\nimport AndroidSwitchNativeComponent, {\n  Commands as AndroidSwitchCommands,\n} from './AndroidSwitchNativeComponent';\nimport SwitchNativeComponent, {\n  Commands as SwitchCommands,\n} from './SwitchNativeComponent';\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\ntype SwitchChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    value: boolean,\n  |}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Whether the switch is disabled. Defaults to false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Boolean value of the switch. Defaults to false.\n   */\n  value?: ?boolean,\n\n  /**\n   * Custom color for the switch thumb.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n   * Custom colors for the switch track.\n   *\n   * NOTE: On iOS when the switch value is false, the track shrinks into the\n   * border. If you want to change the color of the background exposed by the\n   * shrunken track, use `ios_backgroundColor`.\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n   * On iOS, custom color for the background. This background color can be seen\n   * either when the switch value is false or when the switch is disabled (and\n   * the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the change event as an argument. If you want to only receive the\n   * new value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the new value as an argument. If you want to instead receive an\n   * event, use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\n\n/**\n * A visual toggle between two mutually exclusive states.\n *\n * This is a controlled component that requires an `onValueChange` callback that\n * updates the `value` prop in order for the component to reflect user actions.\n * If the `value` prop is not updated, the component will continue to render the\n * supplied `value` prop instead of the expected result of any user actions.\n */\nclass Switch extends React.Component<Props> {\n  _nativeSwitchRef: ?React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  >;\n  _lastNativeValue: ?boolean;\n\n  render(): React.Node {\n    const {\n      disabled,\n      ios_backgroundColor,\n      onChange,\n      onValueChange,\n      style,\n      thumbColor,\n      trackColor,\n      value,\n      ...props\n    } = this.props;\n\n    const trackColorForFalse = trackColor?.false;\n    const trackColorForTrue = trackColor?.true;\n\n    if (Platform.OS === 'android') {\n      const platformProps = {\n        enabled: disabled !== true,\n        on: value === true,\n        style,\n        thumbTintColor: thumbColor,\n        trackColorForFalse: trackColorForFalse,\n        trackColorForTrue: trackColorForTrue,\n        trackTintColor: value === true ? trackColorForTrue : trackColorForFalse,\n      };\n\n      return (\n        <AndroidSwitchNativeComponent\n          {...props}\n          {...platformProps}\n          accessibilityRole={props.accessibilityRole ?? 'switch'}\n          onChange={this._handleChange}\n          onResponderTerminationRequest={returnsFalse}\n          onStartShouldSetResponder={returnsTrue}\n          ref={this._handleSwitchNativeComponentRef}\n        />\n      );\n    }\n\n    const platformProps = {\n      disabled,\n      onTintColor: trackColorForTrue,\n      style: StyleSheet.compose(\n        {height: 31, width: 51},\n        StyleSheet.compose(\n          style,\n          ios_backgroundColor == null\n            ? null\n            : {\n                backgroundColor: ios_backgroundColor,\n                borderRadius: 16,\n              },\n        ),\n      ),\n      thumbTintColor: thumbColor,\n      tintColor: trackColorForFalse,\n      value: value === true,\n    };\n\n    return (\n      <SwitchNativeComponent\n        {...props}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={this._handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={this._handleSwitchNativeComponentRef}\n      />\n    );\n  }\n\n  componentDidUpdate() {\n    // This is necessary in case native updates the switch and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n    const value = this.props.value === true;\n\n    if (this._lastNativeValue !== value) {\n      nativeProps.value = value;\n    }\n\n    if (\n      Object.keys(nativeProps).length > 0 &&\n      this._nativeSwitchRef &&\n      this._nativeSwitchRef.setNativeProps\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwitchCommands.setNativeValue(\n          this._nativeSwitchRef,\n          nativeProps.value,\n        );\n      } else {\n        SwitchCommands.setValue(this._nativeSwitchRef, nativeProps.value);\n      }\n    }\n  }\n\n  _handleChange = (event: SwitchChangeEvent) => {\n    if (this.props.onChange != null) {\n      this.props.onChange(event);\n    }\n\n    if (this.props.onValueChange != null) {\n      this.props.onValueChange(event.nativeEvent.value);\n    }\n\n    this._lastNativeValue = event.nativeEvent.value;\n    this.forceUpdate();\n  };\n\n  _handleSwitchNativeComponentRef = (\n    ref: ?React.ElementRef<\n      typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n    >,\n  ) => {\n    this._nativeSwitchRef = ref;\n  };\n}\n\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\nmodule.exports = Switch;\n"]},"metadata":{},"sourceType":"module"}