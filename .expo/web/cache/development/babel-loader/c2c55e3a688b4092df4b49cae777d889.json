{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nvar _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Button.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Platform = require(\"../Utilities/Platform\");\n\nvar React = require('react');\n\nvar StyleSheet = require(\"../StyleSheet/StyleSheet\");\n\nvar Text = require(\"../Text/Text\");\n\nvar TouchableNativeFeedback = require(\"./Touchable/TouchableNativeFeedback\");\n\nvar TouchableOpacity = require(\"./Touchable/TouchableOpacity\");\n\nvar View = require(\"./View/View\");\n\nvar invariant = require('invariant');\n\nvar Button = function (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          color = _this$props.color,\n          onPress = _this$props.onPress,\n          touchSoundDisabled = _this$props.touchSoundDisabled,\n          title = _this$props.title,\n          hasTVPreferredFocus = _this$props.hasTVPreferredFocus,\n          nextFocusDown = _this$props.nextFocusDown,\n          nextFocusForward = _this$props.nextFocusForward,\n          nextFocusLeft = _this$props.nextFocusLeft,\n          nextFocusRight = _this$props.nextFocusRight,\n          nextFocusUp = _this$props.nextFocusUp,\n          disabled = _this$props.disabled,\n          testID = _this$props.testID;\n      var buttonStyles = [styles.button];\n      var textStyles = [styles.text];\n\n      if (color) {\n        if (Platform.OS === 'ios') {\n          textStyles.push({\n            color: color\n          });\n        } else {\n          buttonStyles.push({\n            backgroundColor: color\n          });\n        }\n      }\n\n      var accessibilityState = {};\n\n      if (disabled) {\n        buttonStyles.push(styles.buttonDisabled);\n        textStyles.push(styles.textDisabled);\n        accessibilityState.disabled = true;\n      }\n\n      invariant(typeof title === 'string', 'The title prop of a Button must be a string');\n      var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;\n      var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n      return React.createElement(Touchable, {\n        accessibilityLabel: accessibilityLabel,\n        accessibilityRole: \"button\",\n        accessibilityState: accessibilityState,\n        hasTVPreferredFocus: hasTVPreferredFocus,\n        nextFocusDown: nextFocusDown,\n        nextFocusForward: nextFocusForward,\n        nextFocusLeft: nextFocusLeft,\n        nextFocusRight: nextFocusRight,\n        nextFocusUp: nextFocusUp,\n        testID: testID,\n        disabled: disabled,\n        onPress: onPress,\n        touchSoundDisabled: touchSoundDisabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: buttonStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        style: textStyles,\n        disabled: disabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }\n      }, formattedTitle)));\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      backgroundColor: '#2196F3',\n      borderRadius: 2\n    }\n  }),\n  text: _objectSpread({\n    textAlign: 'center',\n    margin: 8\n  }, Platform.select({\n    ios: {\n      color: '#007AFF',\n      fontSize: 18\n    },\n    android: {\n      color: 'white',\n      fontWeight: '500'\n    }\n  })),\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf'\n    }\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd'\n    },\n    android: {\n      color: '#a1a1a1'\n    }\n  })\n});\nmodule.exports = Button;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Button.js"],"names":["Platform","require","React","StyleSheet","Text","TouchableNativeFeedback","TouchableOpacity","View","invariant","Button","props","accessibilityLabel","color","onPress","touchSoundDisabled","title","hasTVPreferredFocus","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","disabled","testID","buttonStyles","styles","button","textStyles","text","OS","push","backgroundColor","accessibilityState","buttonDisabled","textDisabled","formattedTitle","toUpperCase","Touchable","Component","create","select","ios","android","elevation","borderRadius","textAlign","margin","fontSize","fontWeight","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,yBAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,UAAU,GAAGF,OAAO,4BAA1B;;AACA,IAAMG,IAAI,GAAGH,OAAO,gBAApB;;AACA,IAAMI,uBAAuB,GAAGJ,OAAO,uCAAvC;;AACA,IAAMK,gBAAgB,GAAGL,OAAO,gCAAhC;;AACA,IAAMM,IAAI,GAAGN,OAAO,eAApB;;AAEA,IAAMO,SAAS,GAAGP,OAAO,CAAC,WAAD,CAAzB;;IA8GMQ,M;;;;;;;;;;;;;WACJ,kBAAqB;AAAA,wBAef,KAAKC,KAfU;AAAA,UAEjBC,kBAFiB,eAEjBA,kBAFiB;AAAA,UAGjBC,KAHiB,eAGjBA,KAHiB;AAAA,UAIjBC,OAJiB,eAIjBA,OAJiB;AAAA,UAKjBC,kBALiB,eAKjBA,kBALiB;AAAA,UAMjBC,KANiB,eAMjBA,KANiB;AAAA,UAOjBC,mBAPiB,eAOjBA,mBAPiB;AAAA,UAQjBC,aARiB,eAQjBA,aARiB;AAAA,UASjBC,gBATiB,eASjBA,gBATiB;AAAA,UAUjBC,aAViB,eAUjBA,aAViB;AAAA,UAWjBC,cAXiB,eAWjBA,cAXiB;AAAA,UAYjBC,WAZiB,eAYjBA,WAZiB;AAAA,UAajBC,QAbiB,eAajBA,QAbiB;AAAA,UAcjBC,MAdiB,eAcjBA,MAdiB;AAgBnB,UAAMC,YAAY,GAAG,CAACC,MAAM,CAACC,MAAR,CAArB;AACA,UAAMC,UAAU,GAAG,CAACF,MAAM,CAACG,IAAR,CAAnB;;AACA,UAAIhB,KAAJ,EAAW;AACT,YAAIZ,QAAQ,CAAC6B,EAAT,KAAgB,KAApB,EAA2B;AACzBF,UAAAA,UAAU,CAACG,IAAX,CAAgB;AAAClB,YAAAA,KAAK,EAAEA;AAAR,WAAhB;AACD,SAFD,MAEO;AACLY,UAAAA,YAAY,CAACM,IAAb,CAAkB;AAACC,YAAAA,eAAe,EAAEnB;AAAlB,WAAlB;AACD;AACF;;AACD,UAAMoB,kBAAkB,GAAG,EAA3B;;AACA,UAAIV,QAAJ,EAAc;AACZE,QAAAA,YAAY,CAACM,IAAb,CAAkBL,MAAM,CAACQ,cAAzB;AACAN,QAAAA,UAAU,CAACG,IAAX,CAAgBL,MAAM,CAACS,YAAvB;AACAF,QAAAA,kBAAkB,CAACV,QAAnB,GAA8B,IAA9B;AACD;;AACDd,MAAAA,SAAS,CACP,OAAOO,KAAP,KAAiB,QADV,EAEP,6CAFO,CAAT;AAIA,UAAMoB,cAAc,GAClBnC,QAAQ,CAAC6B,EAAT,KAAgB,SAAhB,GAA4Bd,KAAK,CAACqB,WAAN,EAA5B,GAAkDrB,KADpD;AAEA,UAAMsB,SAAS,GACbrC,QAAQ,CAAC6B,EAAT,KAAgB,SAAhB,GAA4BxB,uBAA5B,GAAsDC,gBADxD;AAEA,aACE,oBAAC,SAAD;AACE,QAAA,kBAAkB,EAAEK,kBADtB;AAEE,QAAA,iBAAiB,EAAC,QAFpB;AAGE,QAAA,kBAAkB,EAAEqB,kBAHtB;AAIE,QAAA,mBAAmB,EAAEhB,mBAJvB;AAKE,QAAA,aAAa,EAAEC,aALjB;AAME,QAAA,gBAAgB,EAAEC,gBANpB;AAOE,QAAA,aAAa,EAAEC,aAPjB;AAQE,QAAA,cAAc,EAAEC,cARlB;AASE,QAAA,WAAW,EAAEC,WATf;AAUE,QAAA,MAAM,EAAEE,MAVV;AAWE,QAAA,QAAQ,EAAED,QAXZ;AAYE,QAAA,OAAO,EAAET,OAZX;AAaE,QAAA,kBAAkB,EAAEC,kBAbtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAcE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEU,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,UAAb;AAAyB,QAAA,QAAQ,EAAEL,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGa,cADH,CADF,CAdF,CADF;AAsBD;;;;EA9DkBjC,KAAK,CAACoC,S;;AAiE3B,IAAMb,MAAM,GAAGtB,UAAU,CAACoC,MAAX,CAAkB;AAC/Bb,EAAAA,MAAM,EAAE1B,QAAQ,CAACwC,MAAT,CAAgB;AACtBC,IAAAA,GAAG,EAAE,EADiB;AAEtBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,CADJ;AAGPZ,MAAAA,eAAe,EAAE,SAHV;AAIPa,MAAAA,YAAY,EAAE;AAJP;AAFa,GAAhB,CADuB;AAU/BhB,EAAAA,IAAI;AACFiB,IAAAA,SAAS,EAAE,QADT;AAEFC,IAAAA,MAAM,EAAE;AAFN,KAGC9C,QAAQ,CAACwC,MAAT,CAAgB;AACjBC,IAAAA,GAAG,EAAE;AAEH7B,MAAAA,KAAK,EAAE,SAFJ;AAGHmC,MAAAA,QAAQ,EAAE;AAHP,KADY;AAMjBL,IAAAA,OAAO,EAAE;AACP9B,MAAAA,KAAK,EAAE,OADA;AAEPoC,MAAAA,UAAU,EAAE;AAFL;AANQ,GAAhB,CAHD,CAV2B;AAyB/Bf,EAAAA,cAAc,EAAEjC,QAAQ,CAACwC,MAAT,CAAgB;AAC9BC,IAAAA,GAAG,EAAE,EADyB;AAE9BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,CADJ;AAEPZ,MAAAA,eAAe,EAAE;AAFV;AAFqB,GAAhB,CAzBe;AAgC/BG,EAAAA,YAAY,EAAElC,QAAQ,CAACwC,MAAT,CAAgB;AAC5BC,IAAAA,GAAG,EAAE;AACH7B,MAAAA,KAAK,EAAE;AADJ,KADuB;AAI5B8B,IAAAA,OAAO,EAAE;AACP9B,MAAAA,KAAK,EAAE;AADA;AAJmB,GAAhB;AAhCiB,CAAlB,CAAf;AA0CAqC,MAAM,CAACC,OAAP,GAAiBzC,MAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../Utilities/Platform');\nconst React = require('react');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Text = require('../Text/Text');\nconst TouchableNativeFeedback = require('./Touchable/TouchableNativeFeedback');\nconst TouchableOpacity = require('./Touchable/TouchableOpacity');\nconst View = require('./View/View');\n\nconst invariant = require('invariant');\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\nimport type {ColorValue} from '../StyleSheet/StyleSheetTypes';\n\ntype ButtonProps = $ReadOnly<{|\n  /**\n   * Text to display inside the button\n   */\n  title: string,\n\n  /**\n   * Handler to be called when the user taps the button\n   */\n  onPress: (event?: PressEvent) => mixed,\n\n  /**\n   * If true, doesn't play system sound on touch (Android Only)\n   **/\n  touchSoundDisabled?: ?boolean,\n\n  /**\n   * Color of the text (iOS), or background color of the button (Android)\n   */\n  color?: ?ColorValue,\n\n  /**\n   * TV preferred focus (see documentation for the View component).\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   *\n   * @platform android\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Text to display for blindness accessibility features\n   */\n  accessibilityLabel?: ?string,\n\n  /**\n   * If true, disable all interactions for this component.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: ?string,\n|}>;\n\n/**\n * A basic button component that should render nicely on any platform. Supports\n * a minimal level of customization.\n *\n * <center><img src=\"img/buttonExample.png\"></img></center>\n *\n * If this button doesn't look right for your app, you can build your own\n * button using [TouchableOpacity](docs/touchableopacity.html)\n * or [TouchableNativeFeedback](docs/touchablenativefeedback.html).\n * For inspiration, look at the [source code for this button component](https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js).\n * Or, take a look at the [wide variety of button components built by the community](https://js.coach/react-native?search=button).\n *\n * Example usage:\n *\n * ```\n * import { Button } from 'react-native';\n * ...\n *\n * <Button\n *   onPress={onPressLearnMore}\n *   title=\"Learn More\"\n *   color=\"#841584\"\n *   accessibilityLabel=\"Learn more about this purple button\"\n * />\n * ```\n *\n */\n\nclass Button extends React.Component<ButtonProps> {\n  render(): React.Node {\n    const {\n      accessibilityLabel,\n      color,\n      onPress,\n      touchSoundDisabled,\n      title,\n      hasTVPreferredFocus,\n      nextFocusDown,\n      nextFocusForward,\n      nextFocusLeft,\n      nextFocusRight,\n      nextFocusUp,\n      disabled,\n      testID,\n    } = this.props;\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n    if (color) {\n      if (Platform.OS === 'ios') {\n        textStyles.push({color: color});\n      } else {\n        buttonStyles.push({backgroundColor: color});\n      }\n    }\n    const accessibilityState = {};\n    if (disabled) {\n      buttonStyles.push(styles.buttonDisabled);\n      textStyles.push(styles.textDisabled);\n      accessibilityState.disabled = true;\n    }\n    invariant(\n      typeof title === 'string',\n      'The title prop of a Button must be a string',\n    );\n    const formattedTitle =\n      Platform.OS === 'android' ? title.toUpperCase() : title;\n    const Touchable =\n      Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n    return (\n      <Touchable\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        hasTVPreferredFocus={hasTVPreferredFocus}\n        nextFocusDown={nextFocusDown}\n        nextFocusForward={nextFocusForward}\n        nextFocusLeft={nextFocusLeft}\n        nextFocusRight={nextFocusRight}\n        nextFocusUp={nextFocusUp}\n        testID={testID}\n        disabled={disabled}\n        onPress={onPress}\n        touchSoundDisabled={touchSoundDisabled}>\n        <View style={buttonStyles}>\n          <Text style={textStyles} disabled={disabled}>\n            {formattedTitle}\n          </Text>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      // Material design blue from https://material.google.com/style/color.html#color-color-palette\n      backgroundColor: '#2196F3',\n      borderRadius: 2,\n    },\n  }),\n  text: {\n    textAlign: 'center',\n    margin: 8,\n    ...Platform.select({\n      ios: {\n        // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/\n        color: '#007AFF',\n        fontSize: 18,\n      },\n      android: {\n        color: 'white',\n        fontWeight: '500',\n      },\n    }),\n  },\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    },\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    },\n  }),\n});\n\nmodule.exports = Button;\n"]},"metadata":{},"sourceType":"script"}