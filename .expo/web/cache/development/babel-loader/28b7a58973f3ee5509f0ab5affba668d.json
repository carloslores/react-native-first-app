{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Platform = require(\"../../Utilities/Platform\");\n\nvar React = require('react');\n\nvar StyleSheet = require(\"../../StyleSheet/StyleSheet\");\n\nimport RCTInputAccessoryViewNativeComponent from \"./RCTInputAccessoryViewNativeComponent\";\n\nvar InputAccessoryView = function (_React$Component) {\n  _inherits(InputAccessoryView, _React$Component);\n\n  var _super = _createSuper(InputAccessoryView);\n\n  function InputAccessoryView() {\n    _classCallCheck(this, InputAccessoryView);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(InputAccessoryView, [{\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS !== 'ios') {\n        console.warn('<InputAccessoryView> is only supported on iOS.');\n      }\n\n      if (React.Children.count(this.props.children) === 0) {\n        return null;\n      }\n\n      return React.createElement(RCTInputAccessoryViewNativeComponent, {\n        style: [this.props.style, styles.container],\n        nativeID: this.props.nativeID,\n        backgroundColor: this.props.backgroundColor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return InputAccessoryView;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute'\n  }\n});\nmodule.exports = InputAccessoryView;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/TextInput/InputAccessoryView.js"],"names":["Platform","require","React","StyleSheet","RCTInputAccessoryViewNativeComponent","InputAccessoryView","OS","console","warn","Children","count","props","children","style","styles","container","nativeID","backgroundColor","Component","create","position","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,4BAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,UAAU,GAAGF,OAAO,+BAA1B;;AAEA,OAAOG,oCAAP;;IA0EMC,kB;;;;;;;;;;;;;WACJ,kBAAqB;AACnB,UAAIL,QAAQ,CAACM,EAAT,KAAgB,KAApB,EAA2B;AACzBC,QAAAA,OAAO,CAACC,IAAR,CAAa,gDAAb;AACD;;AAED,UAAIN,KAAK,CAACO,QAAN,CAAeC,KAAf,CAAqB,KAAKC,KAAL,CAAWC,QAAhC,MAA8C,CAAlD,EAAqD;AACnD,eAAO,IAAP;AACD;;AAED,aACE,oBAAC,oCAAD;AACE,QAAA,KAAK,EAAE,CAAC,KAAKD,KAAL,CAAWE,KAAZ,EAAmBC,MAAM,CAACC,SAA1B,CADT;AAEE,QAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK,QAFvB;AAGE,QAAA,eAAe,EAAE,KAAKL,KAAL,CAAWM,eAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKN,KAAL,CAAWC,QAJd,CADF;AAQD;;;;EAlB8BV,KAAK,CAACgB,S;;AAqBvC,IAAMJ,MAAM,GAAGX,UAAU,CAACgB,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,QAAQ,EAAE;AADD;AADoB,CAAlB,CAAf;AAMAC,MAAM,CAACC,OAAP,GAAiBjB,kBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\n\nimport RCTInputAccessoryViewNativeComponent from './RCTInputAccessoryViewNativeComponent';\n\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\n\n/**\n * Note: iOS only\n *\n * A component which enables customization of the keyboard input accessory view.\n * The input accessory view is displayed above the keyboard whenever a TextInput\n * has focus. This component can be used to create custom toolbars.\n *\n * To use this component wrap your custom toolbar with the\n * InputAccessoryView component, and set a nativeID. Then, pass that nativeID\n * as the inputAccessoryViewID of whatever TextInput you desire. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput, InputAccessoryView, Button } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {text: 'Placeholder Text'};\n *   }\n *\n *   render() {\n *     const inputAccessoryViewID = \"uniqueID\";\n *     return (\n *       <View>\n *         <ScrollView keyboardDismissMode=\"interactive\">\n *           <TextInput\n *             style={{\n *               padding: 10,\n *               paddingTop: 50,\n *             }}\n *             inputAccessoryViewID=inputAccessoryViewID\n *             onChangeText={text => this.setState({text})}\n *             value={this.state.text}\n *           />\n *         </ScrollView>\n *         <InputAccessoryView nativeID=inputAccessoryViewID>\n *           <Button\n *             onPress={() => this.setState({text: 'Placeholder Text'})}\n *             title=\"Reset Text\"\n *           />\n *         </InputAccessoryView>\n *       </View>\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * This component can also be used to create sticky text inputs (text inputs\n * which are anchored to the top of the keyboard). To do this, wrap a\n * TextInput with the InputAccessoryView component, and don't set a nativeID.\n * For an example, look at InputAccessoryViewExample.js in RNTester.\n */\n\ntype Props = $ReadOnly<{|\n  +children: React.Node,\n  /**\n   * An ID which is used to associate this `InputAccessoryView` to\n   * specified TextInput(s).\n   */\n  nativeID?: ?string,\n  style?: ?ViewStyleProp,\n  backgroundColor?: ?ColorValue,\n|}>;\n\nclass InputAccessoryView extends React.Component<Props> {\n  render(): React.Node {\n    if (Platform.OS !== 'ios') {\n      console.warn('<InputAccessoryView> is only supported on iOS.');\n    }\n\n    if (React.Children.count(this.props.children) === 0) {\n      return null;\n    }\n\n    return (\n      <RCTInputAccessoryViewNativeComponent\n        style={[this.props.style, styles.container]}\n        nativeID={this.props.nativeID}\n        backgroundColor={this.props.backgroundColor}>\n        {this.props.children}\n      </RCTInputAccessoryViewNativeComponent>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n  },\n});\n\nmodule.exports = InputAccessoryView;\n"]},"metadata":{},"sourceType":"module"}