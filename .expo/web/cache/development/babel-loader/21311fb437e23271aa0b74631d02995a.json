{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Pressability from \"../../Pressability/Pressability\";\nimport { PressabilityDebugView } from \"../../Pressability/PressabilityDebug\";\nimport TVTouchable from \"./TVTouchable\";\nimport { Commands } from 'react-native/Libraries/Components/View/ViewNativeComponent';\nimport ReactNative from 'react-native/Libraries/Renderer/shims/ReactNative';\nimport Platform from \"../../Utilities/Platform\";\nimport View from \"../../Components/View/View\";\nimport processColor from \"../../StyleSheet/processColor\";\nimport * as React from 'react';\nimport invariant from 'invariant';\n\nvar TouchableNativeFeedback = function (_React$Component) {\n  _inherits(TouchableNativeFeedback, _React$Component);\n\n  var _super = _createSuper(TouchableNativeFeedback);\n\n  function TouchableNativeFeedback() {\n    var _this;\n\n    _classCallCheck(this, TouchableNativeFeedback);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      pressability: new Pressability(_this._createPressabilityConfig())\n    };\n    return _this;\n  }\n\n  _createClass(TouchableNativeFeedback, [{\n    key: \"_createPressabilityConfig\",\n    value: function _createPressabilityConfig() {\n      var _this2 = this;\n\n      return {\n        cancelable: !this.props.rejectResponderTermination,\n        disabled: this.props.disabled,\n        hitSlop: this.props.hitSlop,\n        delayLongPress: this.props.delayLongPress,\n        delayPressIn: this.props.delayPressIn,\n        delayPressOut: this.props.delayPressOut,\n        minPressDuration: 0,\n        pressRectOffset: this.props.pressRetentionOffset,\n        android_disableSound: this.props.touchSoundDisabled,\n        onLongPress: this.props.onLongPress,\n        onPress: this.props.onPress,\n        onPressIn: function onPressIn(event) {\n          if (Platform.OS === 'android') {\n            _this2._dispatchPressedStateChange(true);\n\n            _this2._dispatchHotspotUpdate(event);\n          }\n\n          if (_this2.props.onPressIn != null) {\n            _this2.props.onPressIn(event);\n          }\n        },\n        onPressMove: function onPressMove(event) {\n          if (Platform.OS === 'android') {\n            _this2._dispatchHotspotUpdate(event);\n          }\n        },\n        onPressOut: function onPressOut(event) {\n          if (Platform.OS === 'android') {\n            _this2._dispatchPressedStateChange(false);\n          }\n\n          if (_this2.props.onPressOut != null) {\n            _this2.props.onPressOut(event);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_dispatchPressedStateChange\",\n    value: function _dispatchPressedStateChange(pressed) {\n      if (Platform.OS === 'android') {\n        var hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n\n        if (hostComponentRef == null) {\n          console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');\n        } else {\n          Commands.setPressed(hostComponentRef, pressed);\n        }\n      }\n    }\n  }, {\n    key: \"_dispatchHotspotUpdate\",\n    value: function _dispatchHotspotUpdate(event) {\n      if (Platform.OS === 'android') {\n        var _event$nativeEvent = event.nativeEvent,\n            locationX = _event$nativeEvent.locationX,\n            locationY = _event$nativeEvent.locationY;\n        var hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n\n        if (hostComponentRef == null) {\n          console.warn('Touchable: Unable to find HostComponent instance. ' + 'Has your Touchable component been unmounted?');\n        } else {\n          Commands.hotspotUpdate(hostComponentRef, locationX != null ? locationX : 0, locationY != null ? locationY : 0);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var element = React.Children.only(this.props.children);\n      var children = [element.props.children];\n\n      if (__DEV__) {\n        if (element.type === View) {\n          children.push(React.createElement(PressabilityDebugView, {\n            color: \"brown\",\n            hitSlop: this.props.hitSlop,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 11\n            }\n          }));\n        }\n      }\n\n      var _this$state$pressabil = this.state.pressability.getEventHandlers(),\n          onBlur = _this$state$pressabil.onBlur,\n          onFocus = _this$state$pressabil.onFocus,\n          eventHandlersWithoutBlurAndFocus = _objectWithoutProperties(_this$state$pressabil, [\"onBlur\", \"onFocus\"]);\n\n      return React.cloneElement.apply(React, [element, _objectSpread(_objectSpread(_objectSpread({}, eventHandlersWithoutBlurAndFocus), getBackgroundProp(this.props.background === undefined ? TouchableNativeFeedback.SelectableBackground() : this.props.background, this.props.useForeground === true)), {}, {\n        accessible: this.props.accessible !== false,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: this.props.accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        accessibilityValue: this.props.accessibilityValue,\n        importantForAccessibility: this.props.importantForAccessibility,\n        accessibilityLiveRegion: this.props.accessibilityLiveRegion,\n        accessibilityViewIsModal: this.props.accessibilityViewIsModal,\n        accessibilityElementsHidden: this.props.accessibilityElementsHidden,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        hitSlop: this.props.hitSlop,\n        focusable: this.props.focusable !== false && this.props.onPress !== undefined && !this.props.disabled,\n        nativeID: this.props.nativeID,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        onLayout: this.props.onLayout,\n        testID: this.props.testID\n      })].concat(children));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (Platform.isTV) {\n        this._tvTouchable = new TVTouchable(this, {\n          getDisabled: function getDisabled() {\n            return _this3.props.disabled === true;\n          },\n          onBlur: function onBlur(event) {\n            if (_this3.props.onBlur != null) {\n              _this3.props.onBlur(event);\n            }\n          },\n          onFocus: function onFocus(event) {\n            if (_this3.props.onFocus != null) {\n              _this3.props.onFocus(event);\n            }\n          },\n          onPress: function onPress(event) {\n            if (_this3.props.onPress != null) {\n              _this3.props.onPress(event);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.state.pressability.configure(this._createPressabilityConfig());\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Platform.isTV) {\n        if (this._tvTouchable != null) {\n          this._tvTouchable.destroy();\n        }\n      }\n\n      this.state.pressability.reset();\n    }\n  }]);\n\n  return TouchableNativeFeedback;\n}(React.Component);\n\nTouchableNativeFeedback.SelectableBackground = function (rippleRadius) {\n  return {\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackground',\n    rippleRadius: rippleRadius\n  };\n};\n\nTouchableNativeFeedback.SelectableBackgroundBorderless = function (rippleRadius) {\n  return {\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n    rippleRadius: rippleRadius\n  };\n};\n\nTouchableNativeFeedback.Ripple = function (color, borderless, rippleRadius) {\n  var processedColor = processColor(color);\n  invariant(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');\n  return {\n    type: 'RippleAndroid',\n    color: processedColor,\n    borderless: borderless,\n    rippleRadius: rippleRadius\n  };\n};\n\nTouchableNativeFeedback.canUseNativeForeground = function () {\n  return Platform.OS === 'android' && Platform.Version >= 23;\n};\n\nvar getBackgroundProp = Platform.OS === 'android' ? function (background, useForeground) {\n  return useForeground && TouchableNativeFeedback.canUseNativeForeground() ? {\n    nativeForegroundAndroid: background\n  } : {\n    nativeBackgroundAndroid: background\n  };\n} : function (background, useForeground) {\n  return null;\n};\nmodule.exports = TouchableNativeFeedback;","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.js"],"names":["Pressability","PressabilityDebugView","TVTouchable","Commands","ReactNative","Platform","View","processColor","React","invariant","TouchableNativeFeedback","state","pressability","_createPressabilityConfig","cancelable","props","rejectResponderTermination","disabled","hitSlop","delayLongPress","delayPressIn","delayPressOut","minPressDuration","pressRectOffset","pressRetentionOffset","android_disableSound","touchSoundDisabled","onLongPress","onPress","onPressIn","event","OS","_dispatchPressedStateChange","_dispatchHotspotUpdate","onPressMove","onPressOut","pressed","hostComponentRef","findHostInstance_DEPRECATED","console","warn","setPressed","nativeEvent","locationX","locationY","hotspotUpdate","element","Children","only","children","__DEV__","type","push","getEventHandlers","onBlur","onFocus","eventHandlersWithoutBlurAndFocus","cloneElement","getBackgroundProp","background","undefined","SelectableBackground","useForeground","accessible","accessibilityLabel","accessibilityRole","accessibilityState","accessibilityActions","onAccessibilityAction","accessibilityValue","importantForAccessibility","accessibilityLiveRegion","accessibilityViewIsModal","accessibilityElementsHidden","hasTVPreferredFocus","focusable","nativeID","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","onLayout","testID","isTV","_tvTouchable","getDisabled","prevProps","prevState","configure","destroy","reset","Component","rippleRadius","attribute","SelectableBackgroundBorderless","Ripple","color","borderless","processedColor","canUseNativeForeground","Version","nativeForegroundAndroid","nativeBackgroundAndroid","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport TVTouchable from './TVTouchable';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\nimport {Commands} from 'react-native/Libraries/Components/View/ViewNativeComponent';\nimport ReactNative from 'react-native/Libraries/Renderer/shims/ReactNative';\nimport type {PressEvent} from 'react-native/Libraries/Types/CoreEventTypes';\nimport Platform from '../../Utilities/Platform';\nimport View from '../../Components/View/View';\nimport processColor from '../../StyleSheet/processColor';\nimport * as React from 'react';\nimport invariant from 'invariant';\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n\n  /**\n   * Determines the type of background drawable that's going to be used to\n   * display feedback. It takes an object with `type` property and extra data\n   * depending on the `type`. It's recommended to use one of the static\n   * methods to generate that dictionary.\n   */\n  background?: ?(\n    | $ReadOnly<{|\n        type: 'ThemeAttrAndroid',\n        attribute:\n          | 'selectableItemBackground'\n          | 'selectableItemBackgroundBorderless',\n        rippleRadius: ?number,\n      |}>\n    | $ReadOnly<{|\n        type: 'RippleAndroid',\n        color: ?number,\n        borderless: boolean,\n        rippleRadius: ?number,\n      |}>\n  ),\n\n  /**\n   * TV preferred focus (see documentation for the View component).\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Set to true to add the ripple effect to the foreground of the view, instead\n   * of the background. This is useful if one of your child views has a\n   * background of its own, or you're e.g. displaying images, and you don't want\n   * the ripple to be covered by them.\n   *\n   * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is\n   * only available on Android 6.0 and above. If you try to use this on older\n   * versions, this will fallback to background.\n   */\n  useForeground?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nclass TouchableNativeFeedback extends React.Component<Props, State> {\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for selectable elements.\n   */\n  static SelectableBackground: (\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    attribute: 'selectableItemBackground',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackground',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for borderless selectable elements. Requires API 21+.\n   */\n  static SelectableBackgroundBorderless: (\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    attribute: 'selectableItemBackgroundBorderless',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android ripple with\n   * the supplied color. If `borderless` is true, the ripple will render outside\n   * of the view bounds. Requires API 21+.\n   */\n  static Ripple: (\n    color: string,\n    borderless: boolean,\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    borderless: boolean,\n    color: ?number,\n    rippleRadius: ?number,\n    type: 'RippleAndroid',\n  |}> = (color: string, borderless: boolean, rippleRadius: ?number) => {\n    const processedColor = processColor(color);\n    invariant(\n      processedColor == null || typeof processedColor === 'number',\n      'Unexpected color given for Ripple color',\n    );\n    return {\n      type: 'RippleAndroid',\n      color: processedColor,\n      borderless,\n      rippleRadius,\n    };\n  };\n\n  /**\n   * Whether `useForeground` is supported.\n   */\n  static canUseNativeForeground: () => boolean = () =>\n    Platform.OS === 'android' && Platform.Version >= 23;\n\n  _tvTouchable: ?TVTouchable;\n\n  state: State = {\n    pressability: new Pressability(this._createPressabilityConfig()),\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled: this.props.disabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      android_disableSound: this.props.touchSoundDisabled,\n      onLongPress: this.props.onLongPress,\n      onPress: this.props.onPress,\n      onPressIn: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(true);\n          this._dispatchHotspotUpdate(event);\n        }\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressMove: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n        }\n      },\n      onPressOut: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(false);\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  _dispatchPressedStateChange(pressed: boolean): void {\n    if (Platform.OS === 'android') {\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.setPressed(hostComponentRef, pressed);\n      }\n    }\n  }\n\n  _dispatchHotspotUpdate(event: PressEvent): void {\n    if (Platform.OS === 'android') {\n      const {locationX, locationY} = event.nativeEvent;\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.hotspotUpdate(\n          hostComponentRef,\n          locationX ?? 0,\n          locationY ?? 0,\n        );\n      }\n    }\n  }\n\n  render(): React.Node {\n    const element = React.Children.only(this.props.children);\n    const children = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"brown\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {\n      onBlur,\n      onFocus,\n      ...eventHandlersWithoutBlurAndFocus\n    } = this.state.pressability.getEventHandlers();\n\n    return React.cloneElement(\n      element,\n      {\n        ...eventHandlersWithoutBlurAndFocus,\n        ...getBackgroundProp(\n          this.props.background === undefined\n            ? TouchableNativeFeedback.SelectableBackground()\n            : this.props.background,\n          this.props.useForeground === true,\n        ),\n        accessible: this.props.accessible !== false,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: this.props.accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        accessibilityValue: this.props.accessibilityValue,\n        importantForAccessibility: this.props.importantForAccessibility,\n        accessibilityLiveRegion: this.props.accessibilityLiveRegion,\n        accessibilityViewIsModal: this.props.accessibilityViewIsModal,\n        accessibilityElementsHidden: this.props.accessibilityElementsHidden,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        hitSlop: this.props.hitSlop,\n        focusable:\n          this.props.focusable !== false &&\n          this.props.onPress !== undefined &&\n          !this.props.disabled,\n        nativeID: this.props.nativeID,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        onLayout: this.props.onLayout,\n        testID: this.props.testID,\n      },\n      ...children,\n    );\n  }\n\n  componentDidMount(): void {\n    if (Platform.isTV) {\n      this._tvTouchable = new TVTouchable(this, {\n        getDisabled: () => this.props.disabled === true,\n        onBlur: event => {\n          if (this.props.onBlur != null) {\n            this.props.onBlur(event);\n          }\n        },\n        onFocus: event => {\n          if (this.props.onFocus != null) {\n            this.props.onFocus(event);\n          }\n        },\n        onPress: event => {\n          if (this.props.onPress != null) {\n            this.props.onPress(event);\n          }\n        },\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    if (Platform.isTV) {\n      if (this._tvTouchable != null) {\n        this._tvTouchable.destroy();\n      }\n    }\n    this.state.pressability.reset();\n  }\n}\n\nconst getBackgroundProp =\n  Platform.OS === 'android'\n    ? (background, useForeground) =>\n        useForeground && TouchableNativeFeedback.canUseNativeForeground()\n          ? {nativeForegroundAndroid: background}\n          : {nativeBackgroundAndroid: background}\n    : (background, useForeground) => null;\n\nmodule.exports = TouchableNativeFeedback;\n"]},"metadata":{},"sourceType":"module"}