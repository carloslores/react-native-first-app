{"ast":null,"code":"'use strict';\n\nimport * as React from 'react';\nimport codegenNativeComponent from \"../../Utilities/codegenNativeComponent\";\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nexport var Commands = codegenNativeCommands({\n  supportedCommands: ['setValue']\n});\nexport default codegenNativeComponent('Switch', {\n  paperComponentName: 'RCTSwitch',\n  excludedPlatform: 'android'\n});","map":{"version":3,"sources":["/Users/carloseduardoloreshernandez/Desktop/Apps/Personal/react-native/react-native-first-app/node_modules/react-native/Libraries/Components/Switch/SwitchNativeComponent.js"],"names":["React","codegenNativeComponent","codegenNativeCommands","Commands","supportedCommands","paperComponentName","excludedPlatform"],"mappings":"AAUA;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,sBAAP;AACA,OAAOC,qBAAP,MAAkC,wDAAlC;AAgCA,OAAO,IAAMC,QAAwB,GAAGD,qBAAqB,CAAiB;AAC5EE,EAAAA,iBAAiB,EAAE,CAAC,UAAD;AADyD,CAAjB,CAAtD;AAIP,eAAgBH,sBAAsB,CAAc,QAAd,EAAwB;AAC5DI,EAAAA,kBAAkB,EAAE,WADwC;AAE5DC,EAAAA,gBAAgB,EAAE;AAF0C,CAAxB,CAAtC","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {BubblingEventHandler, WithDefault} from '../../Types/CodegenTypes';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport * as React from 'react';\n\nimport codegenNativeComponent from '../../Utilities/codegenNativeComponent';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\n\ntype SwitchChangeEvent = $ReadOnly<{|\n  value: boolean,\n|}>;\n\ntype NativeProps = $ReadOnly<{|\n  ...ViewProps,\n\n  // Props\n  disabled?: WithDefault<boolean, false>,\n  value?: WithDefault<boolean, false>,\n  tintColor?: ?ColorValue,\n  onTintColor?: ?ColorValue,\n  thumbTintColor?: ?ColorValue,\n\n  // Deprecated props\n  thumbColor?: ?ColorValue,\n  trackColorForFalse?: ?ColorValue,\n  trackColorForTrue?: ?ColorValue,\n\n  // Events\n  onChange?: ?BubblingEventHandler<SwitchChangeEvent>,\n|}>;\n\ntype ComponentType = HostComponent<NativeProps>;\n\ninterface NativeCommands {\n  +setValue: (viewRef: React.ElementRef<ComponentType>, value: boolean) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['setValue'],\n});\n\nexport default (codegenNativeComponent<NativeProps>('Switch', {\n  paperComponentName: 'RCTSwitch',\n  excludedPlatform: 'android',\n}): ComponentType);\n"]},"metadata":{},"sourceType":"module"}